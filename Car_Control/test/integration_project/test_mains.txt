   /* M0PWM MODE */
                        case PORT_PIN_MODE_M0PWM :
                            if ( ( (Pin_Id >=12 ) && (Pin_Id <=15) ) || (Pin_Id==20 )|| (Pin_Id==21 ) || (Pin_Id==24 )
                                    || (Pin_Id==25) ||( Pin_Id==36) || (Pin_Id==37) ) /*PB4--PB7 ,PC4,5 ,PD0,1 ,PE4,5*/
                            {
                               *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr + PORT_CTL_REG_OFFSET) |= (0x00000004 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else
                            {
                                Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_PARAM_CONFIG);
                            }
                            break;

                        /* MOFAULT MODE */
                        case PORT_PIN_MODE_M0FAULT :
                            if ( (Pin_Id==26)  || ( Pin_Id==30 ) || (Pin_Id==40) )/*PD2 , PC6  ,PF2 */
                            {
                               *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr + PORT_CTL_REG_OFFSET) |= (0x00000004 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else
                            {
                                Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_PARAM_CONFIG);
                            }
                            break;

                        /* M1PWM MODE */
                        case PORT_PIN_MODE_M1PWM :
                            if ( (Pin_Id==6)  || ( Pin_Id==7 ) || ( Pin_Id==24) || (Pin_Id==25)
                                    || ( (Pin_Id>=36) || (Pin_Id<=41) ) ) /*PA6,7 , PD0,1  ,PE4,5 ,PF0-4 */
                            {
                                *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr + PORT_CTL_REG_OFFSET) |= (0x00000005 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else
                            {
                                Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_PARAM_CONFIG);
                            }
                            break;

                        /* M1FAULT MODE */
                        case PORT_PIN_MODE_M1FAULT :
                            if ( (Pin_Id==42) )/* PF4 */
                            {
                               *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr + PORT_CTL_REG_OFFSET) |= (0x00000005 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else
                            {
                                Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_PARAM_CONFIG);
                            }
                            break;

                        /* PHASE MODE*/
                        case PORT_PIN_MODE_IDX_PHASE :
                            if ( (Pin_Id==21)  || ( Pin_Id==22 ) || ( Pin_Id==30) || (Pin_Id==31)
                                    || (Pin_Id==38) || (Pin_Id==39) )/*PC6,7 , PD6,7 ,PF0,1 */
                            {
                                /* set the PMCx bit for this pin by 8 to use it as NMI pin*/
                                *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr+PORT_CTL_REG_OFFSET ) |= (0x00000006 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else
                            {
                                Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_PARAM_CONFIG);
                            }
                            break;

                        /* TIMER MODE */
                        case PORT_PIN_MODE_TIMER :
                            if ( ( (Pin_Id>= 8)  && ( Pin_Id<= 15 ) ) || ( (Pin_Id>= 20)  && ( Pin_Id<= 31 ) )
                            || ( (Pin_Id>= 36)  && ( Pin_Id<= 42 ) ) )/* PB0--7 ,PC4--7 ,PD0--7 ,PF0--4 */
                            {
                                /* set the PMCx bit for this pin by 8 to use it as NMI pin*/
                                *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr+PORT_CTL_REG_OFFSET ) |= (0x00000007 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else
                            {
                                Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_PARAM_CONFIG);
                            }
                            break;

                        /* CAN MODE */
                        case PORT_PIN_MODE_CAN :
                            if ( (Pin_Id == 38) || (Pin_Id == 41) ) /* PF0,3 */
                            {
                                *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr+PORT_CTL_REG_OFFSET ) |= (0x00000003 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else if ( (Pin_Id == 0) || (Pin_Id == 1) || (Pin_Id == 12) || (Pin_Id == 13)
                                    || (Pin_Id == 36) || (Pin_Id == 37) ) /* PA0,1 ,PB4,5 ,PE4,5 */
                            {
                                *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr+PORT_CTL_REG_OFFSET ) |= (0x00000008 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else
                            {
                                Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_PARAM_CONFIG);
                            }
                             break;

                        /* USB MODE */
                        case PORT_PIN_MODE_USB :
                            if ( (Pin_Id==22)  || ( Pin_Id==23 ) || ( Pin_Id==26) || (Pin_Id==27) || (Pin_Id==42)) /* PC6,7 ,PD2,3 ,PF4 */
                            {
                                /* set the PMCx bit for this pin by 8 to use it as NMI pin*/
                                *(volatile uint32 *)((volatile uint8 *)PortGpio_Ptr+PORT_CTL_REG_OFFSET ) |= (0x00000008 << Port_PortPins[Pin_Id].Pin_Num * 4);
                            }
                            else
                            {
                                Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_PARAM_CONFIG);
                            }
                            break;


#include "Dio_Driver/Dio.h"
#include "Port_Driver/Port.h"
#include "PWM_Driver/PWM.h"

#define NUMBER_OF_ITERATIONS_PER_ONE_MILI_SECOND 364

void Delay_MS(unsigned long long n)
{
    volatile unsigned long long count = 0;
    while(count++ < (NUMBER_OF_ITERATIONS_PER_ONE_MILI_SECOND * n) );
}

// Test application for PWM0 on PB6 (M0PWM0)
int main(void) {
    uint16 duty = 0;  // Start with LED off (0% brightness)
    uint8 increasing = 1; // Direction flag (1 = increasing, 0 = decreasing)

    // Initialize PWM only for PB6 (M0PWM0)
    PWM_Init(PWM_Configuration, 1);

    while (1) {
        // Update duty cycle for smooth brightness transition
        PWM_SetDutyCycle(PWM_MODULE_0, PWM_GEN_0, PWM_OUTPUT_A, duty);

        // Delay for smooth fading
        Delay_MS(20);

        // Adjust duty cycle
        if (increasing) {
            duty += 200; // Increase brightness gradually
            if (duty >= PWM_DEFAULT_LOAD) increasing = 0; // Start decreasing at max
        } else {
            duty -= 200; // Decrease brightness gradually
            if (duty == 0) increasing = 1; // Start increasing at min
        }
    }
}

























#include "PWM_Channel_10kHz/Clock_Driver.h"
//#include "GPIO_Driver.h"
//#include "../Dio_Driver/Dio.h"
#include "PWM_Channel_10kHz/PWM_Driver.h"

//Example of using GPIO_Driver

/* This driver uses the GPIO_Driver and PWM_Driver libraries which provide definitions for
   different functions that help to intialize Tiva c  peripherals.
   To use this driver you will also need to use tm4c123gh6pm to map
   registers correctly.
   This example provides you with a PWM signal with variable frequency and duty cycle.
   The initial frequency and duty cycle are 10Khz and 20% respectively.
   Used pins
   ===========
   Pin GND as Ground
   Pin B7 as PWM output

   History
   =======
   2021/August/08  - First release (Mosad)
   mo.eldibani@gmail.com
*/
int i;
int j;
void main()
{
 //Debug_Intialization();                                                     // To intialize Pins for Debugging Leds
 Set_Clock_MHz(16,80);                                                      // To set System clk
 CLK_PWM_Enable(0);                                                         // To Enable PWM module 0
 //CLK_Enable('B');                                                     // To Enable clk for port B
 // PIN_FUNCTION_SELECT('B',7,"Alternative");                               // Set pin B7 as Alternative
 // PIN_CONFIGURE('B',7,"PWM");                                             // Configure Pin B7 as PWM
 // PIN_ANALOG_DIGITAL('B',7,"Digital");                                    // Set pin B7 as digital
  Use_PWM_Divisor(80,40);                                                   //Set PWM clk
  PWM_Generator_Enable(0,0,"Disable");                                      //Disable Generator 0
  PWM_Action_For_Load(0,0,'B',"LOW");                                       //Drive PWM low when reach load value
  PWM_Action_Comparator_Down(0,0,'B',"HIGH");                               //Drive PWm high when reach comparator
  PWM_Set_Frequency(0,0,10000,40);                                          //Set frequency for 10Khz
  PWM_Set_Duty_Cycle(0,0,'B',0);                                            //Set duty cycle for 0%
  PWM_Generator_Enable(0,0,"Enable");                                       //Enable  Generator 0
  PWM_Module_Start(0);                                                      //Start PWM Module 0

  for(i=0;i<3600;i++)                                                   //dummy delay
  {
    for(j=0;j<3600;j++)
    {

    }

  }

    PWM_Set_Duty_Cycle(0,0,'B',60);                                         //Set Duty cycle for 60%

}



/*
 * main.c
 *
 *  Created on: Aug 13, 2024
 *      Author: Omar Tarek
 */

#include <NVIC_Driver/NVIC.h>
#include "Port_Driver/Port.h"
#include "Dio_Driver/Dio.h"
#include "SYSTICK_Driver/SYSTICK.h"
#include "Uart_Driver/uart.h"
#include "Critical_Files/private_registers.h"


/* SysTick Timer ISR ... No need to clear the trigger flag (COUNT) bit ... it cleared automatically by the HW */
/*
void SysTick_Handler(void)
{
    Dio_FlipChannel(DioConf_LED1_CHANNEL_ID_INDEX);
}
*/
/*
void main (void)
{
        Port_Init(&Port_Configuration);
        Dio_Init(&Dio_Configuration);

        SysTick_Init(&systickConfiguration);

        NVIC_EnableInterrupt(30);
    while(1)
    {

    }

}
*/


void main (void)
{

    uint8 receivedString[100]; // Buffer to hold the received String
    uint8 receivedData[10]; // Buffer to hold the received data
    uint32 size = 7; // Number of bytes to receive

    Port_Init(&Port_Configuration);
    Dio_Init(&Dio_Configuration);
    uartInit(&uart0_cfg);


  while(1)
    {
        // Receive a string from UART (until a '#' is received)
        UART_ReceiveString(receivedString);

        // Send the received string back to the terminal
        UART_SendString("Received: ");
        UART_SendString(receivedString);
        UART_SendString("\r\n");

        // Receive a specific number of bytes
        UART_ReceiveData(receivedData, size);

        // Send the received data back to the terminal
        UART_SendString("Received: ");
        UART_SendData(receivedData, size);
        UART_SendString("\r\n");
    }
}


/*

*/

**********************************************************


#include "PWM_Channel_10kHz/Clock_Driver.h"
//#include "GPIO_Driver.h"
//#include "../Dio_Driver/Dio.h"
#include "PWM_Channel_10kHz/PWM_Driver.h"

//Example of using GPIO_Driver

/* This driver uses the GPIO_Driver and PWM_Driver libraries which provide definitions for
   different functions that help to intialize Tiva c  peripherals.
   To use this driver you will also need to use tm4c123gh6pm to map
   registers correctly.
   This example provides you with a PWM signal with variable frequency and duty cycle.
   The initial frequency and duty cycle are 10Khz and 20% respectively.
   Used pins
   ===========
   Pin GND as Ground
   Pin F1 as PWM output

   History
   =======
   2021/August/08  - First release (Mosad)
   mo.eldibani@gmail.com
*/
int i;
int j;
int duty;
void main()
{
 Set_Clock_MHz(16,80);                                                      // To set System clk
 CLK_PWM_Enable(0);                                                         // To Enable PWM module 0
 //CLK_Enable('B');                                                     // To Enable clk for port B
 // PIN_FUNCTION_SELECT('B',7,"Alternative");                               // Set pin B7 as Alternative
 // PIN_CONFIGURE('B',7,"PWM");                                             // Configure Pin B7 as PWM
 // PIN_ANALOG_DIGITAL('B',7,"Digital");                                    // Set pin B7 as digital
  Use_PWM_Divisor(80,40);                                                   //Set PWM clk
  PWM_Generator_Enable(0,0,"Disable");                                      //Disable Generator 0
  PWM_Action_For_Load(0,0,'B',"LOW");                                       //Drive PWM low when reach load value
  PWM_Action_Comparator_Down(0,0,'B',"HIGH");                               //Drive PWm high when reach comparator
  PWM_Set_Frequency(0,0,10000,40);                                          //Set frequency for 10Khz
 // PWM_Set_Duty_Cycle(0,0,'B',0);                                            //Set duty cycle for 0%
  PWM_Generator_Enable(0,0,"Enable");                                       //Enable  Generator 0
  PWM_Module_Start(0);                                                      //Start PWM Module 0

  while(1)
      {
          for (duty = 0; duty <= 100; duty += 1) {
              PWM_Set_Duty_Cycle(0,0,'B',duty);
              for (i = 0; i < 3600; i++) {
                  for (j = 0; j < 3600; j++) {}
              }
          }


          for (duty = 100; duty >= 0; duty -= 1) {
              PWM_Set_Duty_Cycle(0,0,'B',duty);
              for (i = 0; i < 3600; i++) {
                  for (j = 0; j < 3600; j++) {}
              }
          }
      }


    //PWM_Set_Duty_Cycle(0,0,'B',60);                                         //Set Duty cycle for 60%

}










/**
 * main.c
 */

#include "Port_Driver/PORT_Cfg.h"
#include "Int_Ctrl/IntCtrl_Cfg.h"
#include "Port_Driver/PORT.h"
#include "Int_Ctrl/IntCtrl.h"
#include "Gptt_Driver/Gpt.h"
#include "Gptt_Driver/Gpt_cfg.h"
#include "Pwwm_Driver/PWM.h"
#include "Pwwm_Driver/PWM_Cfg.h"

//Test_PWM_Generation_NOISR_Configs(void);

int main(void)
{
    int i =0;
    Port_Init(&Port_Configuration);
    Gpt_Init();
    IntCtrl_Init();
    pwm_init();
    pwm_enable(PWM_NUM_0_1_A);
    while(1)
    {
        Delay_ms(50);
        pwm_AutomaticDutyCycle(PWM_NUM_0_1_A, i);
        i++;
        if (i > 100)
        {
            i = 0;
        }

    }
}
/*
Test_PWM_Generation_NOISR_Configs(void)
{
    int i =0;
    Port_Init(&Port_Configuration);
    Gpt_Init();
    IntCtrl_Init();
    pwm_init();
    pwm_enable(PWM_NUM_0_1_A);
    while(1)
    {
        Delay_ms(50);
        pwm_AutomaticDutyCycle(PWM_NUM_0_1_A, i);
        i++;
        if (i > 100)
        {
            i = 0;
        }

    }
}
*/
