
MPU_6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ed4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00002ed4  00002f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021cc  00000000  00000000  0000305c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001756  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000697e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000911b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000bb2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c49c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <main>
      7a:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e6       	ldi	r26, 0x6A	; 106
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e6       	ldi	r24, 0x6A	; 106
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a e6       	ldi	r22, 0x6A	; 106
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ee 58       	subi	r30, 0x8E	; 142
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <HLCD_voidInit>:
#include "MDIO_interface.h"
#include "HLCD_interface.h"
#include "HLCD_config.h"

void HLCD_voidInit(void)
{
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	c6 55       	subi	r28, 0x56	; 86
     e2c:	d0 40       	sbci	r29, 0x00	; 0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPortDirection(HLCD_DATA_PORT,0xff);
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	6f ef       	ldi	r22, 0xFF	; 255
     e3c:	0e 94 13 10 	call	0x2026	; 0x2026 <MDIO_voidSetPortDirection>
	MDIO_voidSetPinDirection(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_OUTPUT);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	4b e0       	ldi	r20, 0x0B	; 11
     e46:	0e 94 d7 10 	call	0x21ae	; 0x21ae <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_OUTPUT);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	4b e0       	ldi	r20, 0x0B	; 11
     e50:	0e 94 d7 10 	call	0x21ae	; 0x21ae <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(HLCD_CTRL_PORT,HLCD_EN_PIN,MDIO_OUTPUT);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	62 e0       	ldi	r22, 0x02	; 2
     e58:	4b e0       	ldi	r20, 0x0B	; 11
     e5a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <MDIO_voidSetPinDirection>
     e5e:	fe 01       	movw	r30, r28
     e60:	ed 5a       	subi	r30, 0xAD	; 173
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 ef       	ldi	r26, 0xF0	; 240
     e6a:	b1 e4       	ldi	r27, 0x41	; 65
     e6c:	80 83       	st	Z, r24
     e6e:	91 83       	std	Z+1, r25	; 0x01
     e70:	a2 83       	std	Z+2, r26	; 0x02
     e72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e74:	8e 01       	movw	r16, r28
     e76:	01 5b       	subi	r16, 0xB1	; 177
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	fe 01       	movw	r30, r28
     e7c:	ed 5a       	subi	r30, 0xAD	; 173
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	4a ef       	ldi	r20, 0xFA	; 250
     e8e:	54 e4       	ldi	r21, 0x44	; 68
     e90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	f8 01       	movw	r30, r16
     e9a:	80 83       	st	Z, r24
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	a2 83       	std	Z+2, r26	; 0x02
     ea0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ea2:	fe 01       	movw	r30, r28
     ea4:	e1 5b       	subi	r30, 0xB1	; 177
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	93 81       	ldd	r25, Z+3	; 0x03
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	44 f4       	brge	.+16     	; 0xed0 <HLCD_voidInit+0xb2>
		__ticks = 1;
     ec0:	fe 01       	movw	r30, r28
     ec2:	e3 5b       	subi	r30, 0xB3	; 179
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24
     ece:	64 c0       	rjmp	.+200    	; 0xf98 <HLCD_voidInit+0x17a>
	else if (__tmp > 65535)
     ed0:	fe 01       	movw	r30, r28
     ed2:	e1 5b       	subi	r30, 0xB1	; 177
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	60 81       	ld	r22, Z
     ed8:	71 81       	ldd	r23, Z+1	; 0x01
     eda:	82 81       	ldd	r24, Z+2	; 0x02
     edc:	93 81       	ldd	r25, Z+3	; 0x03
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	3f ef       	ldi	r19, 0xFF	; 255
     ee2:	4f e7       	ldi	r20, 0x7F	; 127
     ee4:	57 e4       	ldi	r21, 0x47	; 71
     ee6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     eea:	18 16       	cp	r1, r24
     eec:	0c f0       	brlt	.+2      	; 0xef0 <HLCD_voidInit+0xd2>
     eee:	43 c0       	rjmp	.+134    	; 0xf76 <HLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef0:	fe 01       	movw	r30, r28
     ef2:	ed 5a       	subi	r30, 0xAD	; 173
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	8e 01       	movw	r16, r28
     f10:	03 5b       	subi	r16, 0xB3	; 179
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	bc 01       	movw	r22, r24
     f16:	cd 01       	movw	r24, r26
     f18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	f8 01       	movw	r30, r16
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
     f26:	1f c0       	rjmp	.+62     	; 0xf66 <HLCD_voidInit+0x148>
     f28:	fe 01       	movw	r30, r28
     f2a:	e5 5b       	subi	r30, 0xB5	; 181
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	88 ec       	ldi	r24, 0xC8	; 200
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f36:	fe 01       	movw	r30, r28
     f38:	e5 5b       	subi	r30, 0xB5	; 181
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <HLCD_voidInit+0x122>
     f44:	fe 01       	movw	r30, r28
     f46:	e5 5b       	subi	r30, 0xB5	; 181
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4e:	de 01       	movw	r26, r28
     f50:	a3 5b       	subi	r26, 0xB3	; 179
     f52:	bf 4f       	sbci	r27, 0xFF	; 255
     f54:	fe 01       	movw	r30, r28
     f56:	e3 5b       	subi	r30, 0xB3	; 179
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	11 96       	adiw	r26, 0x01	; 1
     f62:	9c 93       	st	X, r25
     f64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f66:	fe 01       	movw	r30, r28
     f68:	e3 5b       	subi	r30, 0xB3	; 179
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	d1 f6       	brne	.-76     	; 0xf28 <HLCD_voidInit+0x10a>
     f74:	27 c0       	rjmp	.+78     	; 0xfc4 <HLCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f76:	8e 01       	movw	r16, r28
     f78:	03 5b       	subi	r16, 0xB3	; 179
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	fe 01       	movw	r30, r28
     f7e:	e1 5b       	subi	r30, 0xB1	; 177
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	f8 01       	movw	r30, r16
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	de 01       	movw	r26, r28
     f9a:	a7 5b       	subi	r26, 0xB7	; 183
     f9c:	bf 4f       	sbci	r27, 0xFF	; 255
     f9e:	fe 01       	movw	r30, r28
     fa0:	e3 5b       	subi	r30, 0xB3	; 179
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	8d 93       	st	X+, r24
     faa:	9c 93       	st	X, r25
     fac:	fe 01       	movw	r30, r28
     fae:	e7 5b       	subi	r30, 0xB7	; 183
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <HLCD_voidInit+0x198>
     fba:	fe 01       	movw	r30, r28
     fbc:	e7 5b       	subi	r30, 0xB7	; 183
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
	_delay_ms(30);
	HLCD_voidWriteCmd(0x3f);
     fc4:	8f e3       	ldi	r24, 0x3F	; 63
     fc6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <HLCD_voidWriteCmd>
     fca:	fe 01       	movw	r30, r28
     fcc:	eb 5b       	subi	r30, 0xBB	; 187
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a8 e4       	ldi	r26, 0x48	; 72
     fd6:	b2 e4       	ldi	r27, 0x42	; 66
     fd8:	80 83       	st	Z, r24
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	a2 83       	std	Z+2, r26	; 0x02
     fde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fe0:	8e 01       	movw	r16, r28
     fe2:	0f 5b       	subi	r16, 0xBF	; 191
     fe4:	1f 4f       	sbci	r17, 0xFF	; 255
     fe6:	fe 01       	movw	r30, r28
     fe8:	eb 5b       	subi	r30, 0xBB	; 187
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	2b ea       	ldi	r18, 0xAB	; 171
     ff6:	3a ea       	ldi	r19, 0xAA	; 170
     ff8:	4a e2       	ldi	r20, 0x2A	; 42
     ffa:	50 e4       	ldi	r21, 0x40	; 64
     ffc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	f8 01       	movw	r30, r16
    1006:	80 83       	st	Z, r24
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	a2 83       	std	Z+2, r26	; 0x02
    100c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    100e:	fe 01       	movw	r30, r28
    1010:	ef 5b       	subi	r30, 0xBF	; 191
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	5f e3       	ldi	r21, 0x3F	; 63
    1024:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1028:	88 23       	and	r24, r24
    102a:	34 f4       	brge	.+12     	; 0x1038 <HLCD_voidInit+0x21a>
		__ticks = 1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	fe 01       	movw	r30, r28
    1030:	e0 5c       	subi	r30, 0xC0	; 192
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 83       	st	Z, r24
    1036:	9d c0       	rjmp	.+314    	; 0x1172 <HLCD_voidInit+0x354>
	else if (__tmp > 255)
    1038:	fe 01       	movw	r30, r28
    103a:	ef 5b       	subi	r30, 0xBF	; 191
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	60 81       	ld	r22, Z
    1040:	71 81       	ldd	r23, Z+1	; 0x01
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4f e7       	ldi	r20, 0x7F	; 127
    104c:	53 e4       	ldi	r21, 0x43	; 67
    104e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1052:	18 16       	cp	r1, r24
    1054:	0c f0       	brlt	.+2      	; 0x1058 <HLCD_voidInit+0x23a>
    1056:	7e c0       	rjmp	.+252    	; 0x1154 <HLCD_voidInit+0x336>
	{
		_delay_ms(__us / 1000.0);
    1058:	fe 01       	movw	r30, r28
    105a:	eb 5b       	subi	r30, 0xBB	; 187
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a e7       	ldi	r20, 0x7A	; 122
    106c:	54 e4       	ldi	r21, 0x44	; 68
    106e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8c af       	std	Y+60, r24	; 0x3c
    1078:	9d af       	std	Y+61, r25	; 0x3d
    107a:	ae af       	std	Y+62, r26	; 0x3e
    107c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1080:	7d ad       	ldd	r23, Y+61	; 0x3d
    1082:	8e ad       	ldd	r24, Y+62	; 0x3e
    1084:	9f ad       	ldd	r25, Y+63	; 0x3f
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	4a ef       	ldi	r20, 0xFA	; 250
    108c:	54 e4       	ldi	r21, 0x44	; 68
    108e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	88 af       	std	Y+56, r24	; 0x38
    1098:	99 af       	std	Y+57, r25	; 0x39
    109a:	aa af       	std	Y+58, r26	; 0x3a
    109c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    109e:	68 ad       	ldd	r22, Y+56	; 0x38
    10a0:	79 ad       	ldd	r23, Y+57	; 0x39
    10a2:	8a ad       	ldd	r24, Y+58	; 0x3a
    10a4:	9b ad       	ldd	r25, Y+59	; 0x3b
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <HLCD_voidInit+0x2a2>
		__ticks = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9f ab       	std	Y+55, r25	; 0x37
    10bc:	8e ab       	std	Y+54, r24	; 0x36
    10be:	3f c0       	rjmp	.+126    	; 0x113e <HLCD_voidInit+0x320>
	else if (__tmp > 65535)
    10c0:	68 ad       	ldd	r22, Y+56	; 0x38
    10c2:	79 ad       	ldd	r23, Y+57	; 0x39
    10c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    10c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	3f ef       	ldi	r19, 0xFF	; 255
    10cc:	4f e7       	ldi	r20, 0x7F	; 127
    10ce:	57 e4       	ldi	r21, 0x47	; 71
    10d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10d4:	18 16       	cp	r1, r24
    10d6:	4c f5       	brge	.+82     	; 0x112a <HLCD_voidInit+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    10da:	7d ad       	ldd	r23, Y+61	; 0x3d
    10dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    10de:	9f ad       	ldd	r25, Y+63	; 0x3f
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9f ab       	std	Y+55, r25	; 0x37
    10fe:	8e ab       	std	Y+54, r24	; 0x36
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <HLCD_voidInit+0x302>
    1102:	88 ec       	ldi	r24, 0xC8	; 200
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9d ab       	std	Y+53, r25	; 0x35
    1108:	8c ab       	std	Y+52, r24	; 0x34
    110a:	8c a9       	ldd	r24, Y+52	; 0x34
    110c:	9d a9       	ldd	r25, Y+53	; 0x35
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <HLCD_voidInit+0x2f0>
    1112:	9d ab       	std	Y+53, r25	; 0x35
    1114:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1116:	8e a9       	ldd	r24, Y+54	; 0x36
    1118:	9f a9       	ldd	r25, Y+55	; 0x37
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	9f ab       	std	Y+55, r25	; 0x37
    111e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1120:	8e a9       	ldd	r24, Y+54	; 0x36
    1122:	9f a9       	ldd	r25, Y+55	; 0x37
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	69 f7       	brne	.-38     	; 0x1102 <HLCD_voidInit+0x2e4>
    1128:	2d c0       	rjmp	.+90     	; 0x1184 <HLCD_voidInit+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112a:	68 ad       	ldd	r22, Y+56	; 0x38
    112c:	79 ad       	ldd	r23, Y+57	; 0x39
    112e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1130:	9b ad       	ldd	r25, Y+59	; 0x3b
    1132:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9f ab       	std	Y+55, r25	; 0x37
    113c:	8e ab       	std	Y+54, r24	; 0x36
    113e:	8e a9       	ldd	r24, Y+54	; 0x36
    1140:	9f a9       	ldd	r25, Y+55	; 0x37
    1142:	9b ab       	std	Y+51, r25	; 0x33
    1144:	8a ab       	std	Y+50, r24	; 0x32
    1146:	8a a9       	ldd	r24, Y+50	; 0x32
    1148:	9b a9       	ldd	r25, Y+51	; 0x33
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <HLCD_voidInit+0x32c>
    114e:	9b ab       	std	Y+51, r25	; 0x33
    1150:	8a ab       	std	Y+50, r24	; 0x32
    1152:	18 c0       	rjmp	.+48     	; 0x1184 <HLCD_voidInit+0x366>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1154:	fe 01       	movw	r30, r28
    1156:	ef 5b       	subi	r30, 0xBF	; 191
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	60 81       	ld	r22, Z
    115c:	71 81       	ldd	r23, Z+1	; 0x01
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	fe 01       	movw	r30, r28
    116c:	e0 5c       	subi	r30, 0xC0	; 192
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	80 83       	st	Z, r24
    1172:	fe 01       	movw	r30, r28
    1174:	e0 5c       	subi	r30, 0xC0	; 192
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 81       	ld	r24, Z
    117a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    117c:	89 a9       	ldd	r24, Y+49	; 0x31
    117e:	8a 95       	dec	r24
    1180:	f1 f7       	brne	.-4      	; 0x117e <HLCD_voidInit+0x360>
    1182:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	HLCD_voidWriteCmd(0x0f);
    1184:	8f e0       	ldi	r24, 0x0F	; 15
    1186:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <HLCD_voidWriteCmd>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a8 e4       	ldi	r26, 0x48	; 72
    1190:	b2 e4       	ldi	r27, 0x42	; 66
    1192:	8d a7       	std	Y+45, r24	; 0x2d
    1194:	9e a7       	std	Y+46, r25	; 0x2e
    1196:	af a7       	std	Y+47, r26	; 0x2f
    1198:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    119a:	6d a5       	ldd	r22, Y+45	; 0x2d
    119c:	7e a5       	ldd	r23, Y+46	; 0x2e
    119e:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a0:	98 a9       	ldd	r25, Y+48	; 0x30
    11a2:	2b ea       	ldi	r18, 0xAB	; 171
    11a4:	3a ea       	ldi	r19, 0xAA	; 170
    11a6:	4a e2       	ldi	r20, 0x2A	; 42
    11a8:	50 e4       	ldi	r21, 0x40	; 64
    11aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	89 a7       	std	Y+41, r24	; 0x29
    11b4:	9a a7       	std	Y+42, r25	; 0x2a
    11b6:	ab a7       	std	Y+43, r26	; 0x2b
    11b8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    11ba:	69 a5       	ldd	r22, Y+41	; 0x29
    11bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    11be:	8b a5       	ldd	r24, Y+43	; 0x2b
    11c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e8       	ldi	r20, 0x80	; 128
    11c8:	5f e3       	ldi	r21, 0x3F	; 63
    11ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11ce:	88 23       	and	r24, r24
    11d0:	1c f4       	brge	.+6      	; 0x11d8 <HLCD_voidInit+0x3ba>
		__ticks = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	88 a7       	std	Y+40, r24	; 0x28
    11d6:	91 c0       	rjmp	.+290    	; 0x12fa <HLCD_voidInit+0x4dc>
	else if (__tmp > 255)
    11d8:	69 a5       	ldd	r22, Y+41	; 0x29
    11da:	7a a5       	ldd	r23, Y+42	; 0x2a
    11dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    11de:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	53 e4       	ldi	r21, 0x43	; 67
    11e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	0c f0       	brlt	.+2      	; 0x11f2 <HLCD_voidInit+0x3d4>
    11f0:	7b c0       	rjmp	.+246    	; 0x12e8 <HLCD_voidInit+0x4ca>
	{
		_delay_ms(__us / 1000.0);
    11f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    11f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    11f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11f8:	98 a9       	ldd	r25, Y+48	; 0x30
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a e7       	ldi	r20, 0x7A	; 122
    1200:	54 e4       	ldi	r21, 0x44	; 68
    1202:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	8c a3       	std	Y+36, r24	; 0x24
    120c:	9d a3       	std	Y+37, r25	; 0x25
    120e:	ae a3       	std	Y+38, r26	; 0x26
    1210:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1212:	6c a1       	ldd	r22, Y+36	; 0x24
    1214:	7d a1       	ldd	r23, Y+37	; 0x25
    1216:	8e a1       	ldd	r24, Y+38	; 0x26
    1218:	9f a1       	ldd	r25, Y+39	; 0x27
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4a ef       	ldi	r20, 0xFA	; 250
    1220:	54 e4       	ldi	r21, 0x44	; 68
    1222:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	88 a3       	std	Y+32, r24	; 0x20
    122c:	99 a3       	std	Y+33, r25	; 0x21
    122e:	aa a3       	std	Y+34, r26	; 0x22
    1230:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1232:	68 a1       	ldd	r22, Y+32	; 0x20
    1234:	79 a1       	ldd	r23, Y+33	; 0x21
    1236:	8a a1       	ldd	r24, Y+34	; 0x22
    1238:	9b a1       	ldd	r25, Y+35	; 0x23
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e8       	ldi	r20, 0x80	; 128
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1246:	88 23       	and	r24, r24
    1248:	2c f4       	brge	.+10     	; 0x1254 <HLCD_voidInit+0x436>
		__ticks = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9f 8f       	std	Y+31, r25	; 0x1f
    1250:	8e 8f       	std	Y+30, r24	; 0x1e
    1252:	3f c0       	rjmp	.+126    	; 0x12d2 <HLCD_voidInit+0x4b4>
	else if (__tmp > 65535)
    1254:	68 a1       	ldd	r22, Y+32	; 0x20
    1256:	79 a1       	ldd	r23, Y+33	; 0x21
    1258:	8a a1       	ldd	r24, Y+34	; 0x22
    125a:	9b a1       	ldd	r25, Y+35	; 0x23
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	57 e4       	ldi	r21, 0x47	; 71
    1264:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1268:	18 16       	cp	r1, r24
    126a:	4c f5       	brge	.+82     	; 0x12be <HLCD_voidInit+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126c:	6c a1       	ldd	r22, Y+36	; 0x24
    126e:	7d a1       	ldd	r23, Y+37	; 0x25
    1270:	8e a1       	ldd	r24, Y+38	; 0x26
    1272:	9f a1       	ldd	r25, Y+39	; 0x27
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e2       	ldi	r20, 0x20	; 32
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9f 8f       	std	Y+31, r25	; 0x1f
    1292:	8e 8f       	std	Y+30, r24	; 0x1e
    1294:	0f c0       	rjmp	.+30     	; 0x12b4 <HLCD_voidInit+0x496>
    1296:	88 ec       	ldi	r24, 0xC8	; 200
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9d 8f       	std	Y+29, r25	; 0x1d
    129c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    129e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <HLCD_voidInit+0x484>
    12a6:	9d 8f       	std	Y+29, r25	; 0x1d
    12a8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	9f 8f       	std	Y+31, r25	; 0x1f
    12b2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	69 f7       	brne	.-38     	; 0x1296 <HLCD_voidInit+0x478>
    12bc:	24 c0       	rjmp	.+72     	; 0x1306 <HLCD_voidInit+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12be:	68 a1       	ldd	r22, Y+32	; 0x20
    12c0:	79 a1       	ldd	r23, Y+33	; 0x21
    12c2:	8a a1       	ldd	r24, Y+34	; 0x22
    12c4:	9b a1       	ldd	r25, Y+35	; 0x23
    12c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	9f 8f       	std	Y+31, r25	; 0x1f
    12d0:	8e 8f       	std	Y+30, r24	; 0x1e
    12d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12d6:	9b 8f       	std	Y+27, r25	; 0x1b
    12d8:	8a 8f       	std	Y+26, r24	; 0x1a
    12da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <HLCD_voidInit+0x4c0>
    12e2:	9b 8f       	std	Y+27, r25	; 0x1b
    12e4:	8a 8f       	std	Y+26, r24	; 0x1a
    12e6:	0f c0       	rjmp	.+30     	; 0x1306 <HLCD_voidInit+0x4e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12e8:	69 a5       	ldd	r22, Y+41	; 0x29
    12ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    12ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    12f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	88 a7       	std	Y+40, r24	; 0x28
    12fa:	88 a5       	ldd	r24, Y+40	; 0x28
    12fc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1300:	8a 95       	dec	r24
    1302:	f1 f7       	brne	.-4      	; 0x1300 <HLCD_voidInit+0x4e2>
    1304:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	HLCD_voidClearScreen();
    1306:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <HLCD_voidClearScreen>
	HLCD_voidWriteCmd(0x06);
    130a:	86 e0       	ldi	r24, 0x06	; 6
    130c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <HLCD_voidWriteCmd>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a8 e4       	ldi	r26, 0x48	; 72
    1316:	b2 e4       	ldi	r27, 0x42	; 66
    1318:	8d 8b       	std	Y+21, r24	; 0x15
    131a:	9e 8b       	std	Y+22, r25	; 0x16
    131c:	af 8b       	std	Y+23, r26	; 0x17
    131e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1320:	6d 89       	ldd	r22, Y+21	; 0x15
    1322:	7e 89       	ldd	r23, Y+22	; 0x16
    1324:	8f 89       	ldd	r24, Y+23	; 0x17
    1326:	98 8d       	ldd	r25, Y+24	; 0x18
    1328:	2b ea       	ldi	r18, 0xAB	; 171
    132a:	3a ea       	ldi	r19, 0xAA	; 170
    132c:	4a e2       	ldi	r20, 0x2A	; 42
    132e:	50 e4       	ldi	r21, 0x40	; 64
    1330:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	89 8b       	std	Y+17, r24	; 0x11
    133a:	9a 8b       	std	Y+18, r25	; 0x12
    133c:	ab 8b       	std	Y+19, r26	; 0x13
    133e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1340:	69 89       	ldd	r22, Y+17	; 0x11
    1342:	7a 89       	ldd	r23, Y+18	; 0x12
    1344:	8b 89       	ldd	r24, Y+19	; 0x13
    1346:	9c 89       	ldd	r25, Y+20	; 0x14
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1354:	88 23       	and	r24, r24
    1356:	1c f4       	brge	.+6      	; 0x135e <HLCD_voidInit+0x540>
		__ticks = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	88 8b       	std	Y+16, r24	; 0x10
    135c:	91 c0       	rjmp	.+290    	; 0x1480 <HLCD_voidInit+0x662>
	else if (__tmp > 255)
    135e:	69 89       	ldd	r22, Y+17	; 0x11
    1360:	7a 89       	ldd	r23, Y+18	; 0x12
    1362:	8b 89       	ldd	r24, Y+19	; 0x13
    1364:	9c 89       	ldd	r25, Y+20	; 0x14
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	53 e4       	ldi	r21, 0x43	; 67
    136e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1372:	18 16       	cp	r1, r24
    1374:	0c f0       	brlt	.+2      	; 0x1378 <HLCD_voidInit+0x55a>
    1376:	7b c0       	rjmp	.+246    	; 0x146e <HLCD_voidInit+0x650>
	{
		_delay_ms(__us / 1000.0);
    1378:	6d 89       	ldd	r22, Y+21	; 0x15
    137a:	7e 89       	ldd	r23, Y+22	; 0x16
    137c:	8f 89       	ldd	r24, Y+23	; 0x17
    137e:	98 8d       	ldd	r25, Y+24	; 0x18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a e7       	ldi	r20, 0x7A	; 122
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8c 87       	std	Y+12, r24	; 0x0c
    1392:	9d 87       	std	Y+13, r25	; 0x0d
    1394:	ae 87       	std	Y+14, r26	; 0x0e
    1396:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1398:	6c 85       	ldd	r22, Y+12	; 0x0c
    139a:	7d 85       	ldd	r23, Y+13	; 0x0d
    139c:	8e 85       	ldd	r24, Y+14	; 0x0e
    139e:	9f 85       	ldd	r25, Y+15	; 0x0f
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	4a ef       	ldi	r20, 0xFA	; 250
    13a6:	54 e4       	ldi	r21, 0x44	; 68
    13a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	88 87       	std	Y+8, r24	; 0x08
    13b2:	99 87       	std	Y+9, r25	; 0x09
    13b4:	aa 87       	std	Y+10, r26	; 0x0a
    13b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    13b8:	68 85       	ldd	r22, Y+8	; 0x08
    13ba:	79 85       	ldd	r23, Y+9	; 0x09
    13bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13be:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e8       	ldi	r20, 0x80	; 128
    13c6:	5f e3       	ldi	r21, 0x3F	; 63
    13c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13cc:	88 23       	and	r24, r24
    13ce:	2c f4       	brge	.+10     	; 0x13da <HLCD_voidInit+0x5bc>
		__ticks = 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9f 83       	std	Y+7, r25	; 0x07
    13d6:	8e 83       	std	Y+6, r24	; 0x06
    13d8:	3f c0       	rjmp	.+126    	; 0x1458 <HLCD_voidInit+0x63a>
	else if (__tmp > 65535)
    13da:	68 85       	ldd	r22, Y+8	; 0x08
    13dc:	79 85       	ldd	r23, Y+9	; 0x09
    13de:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	3f ef       	ldi	r19, 0xFF	; 255
    13e6:	4f e7       	ldi	r20, 0x7F	; 127
    13e8:	57 e4       	ldi	r21, 0x47	; 71
    13ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13ee:	18 16       	cp	r1, r24
    13f0:	4c f5       	brge	.+82     	; 0x1444 <HLCD_voidInit+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    13f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    13f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e2       	ldi	r20, 0x20	; 32
    1400:	51 e4       	ldi	r21, 0x41	; 65
    1402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	bc 01       	movw	r22, r24
    140c:	cd 01       	movw	r24, r26
    140e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9f 83       	std	Y+7, r25	; 0x07
    1418:	8e 83       	std	Y+6, r24	; 0x06
    141a:	0f c0       	rjmp	.+30     	; 0x143a <HLCD_voidInit+0x61c>
    141c:	88 ec       	ldi	r24, 0xC8	; 200
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	9d 83       	std	Y+5, r25	; 0x05
    1422:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <HLCD_voidInit+0x60a>
    142c:	9d 83       	std	Y+5, r25	; 0x05
    142e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	9f 83       	std	Y+7, r25	; 0x07
    1438:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143a:	8e 81       	ldd	r24, Y+6	; 0x06
    143c:	9f 81       	ldd	r25, Y+7	; 0x07
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	69 f7       	brne	.-38     	; 0x141c <HLCD_voidInit+0x5fe>
    1442:	24 c0       	rjmp	.+72     	; 0x148c <HLCD_voidInit+0x66e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1444:	68 85       	ldd	r22, Y+8	; 0x08
    1446:	79 85       	ldd	r23, Y+9	; 0x09
    1448:	8a 85       	ldd	r24, Y+10	; 0x0a
    144a:	9b 85       	ldd	r25, Y+11	; 0x0b
    144c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	9f 83       	std	Y+7, r25	; 0x07
    1456:	8e 83       	std	Y+6, r24	; 0x06
    1458:	8e 81       	ldd	r24, Y+6	; 0x06
    145a:	9f 81       	ldd	r25, Y+7	; 0x07
    145c:	9b 83       	std	Y+3, r25	; 0x03
    145e:	8a 83       	std	Y+2, r24	; 0x02
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	9b 81       	ldd	r25, Y+3	; 0x03
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <HLCD_voidInit+0x646>
    1468:	9b 83       	std	Y+3, r25	; 0x03
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	0f c0       	rjmp	.+30     	; 0x148c <HLCD_voidInit+0x66e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    146e:	69 89       	ldd	r22, Y+17	; 0x11
    1470:	7a 89       	ldd	r23, Y+18	; 0x12
    1472:	8b 89       	ldd	r24, Y+19	; 0x13
    1474:	9c 89       	ldd	r25, Y+20	; 0x14
    1476:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	88 8b       	std	Y+16, r24	; 0x10
    1480:	88 89       	ldd	r24, Y+16	; 0x10
    1482:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	8a 95       	dec	r24
    1488:	f1 f7       	brne	.-4      	; 0x1486 <HLCD_voidInit+0x668>
    148a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    148c:	ca 5a       	subi	r28, 0xAA	; 170
    148e:	df 4f       	sbci	r29, 0xFF	; 255
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	08 95       	ret

000014a4 <HLCD_voidWriteChar>:

void HLCD_voidWriteChar(const char ARG_ccharChar)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	e1 97       	sbiw	r28, 0x31	; 49
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	89 ab       	std	Y+49, r24	; 0x31
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_LOW);
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_HIGH);
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
	MDIO_voidSetPortValue(HLCD_DATA_PORT,ARG_ccharChar);
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	69 a9       	ldd	r22, Y+49	; 0x31
    14d2:	0e 94 54 10 	call	0x20a8	; 0x20a8 <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_EN_PIN,MDIO_LOW);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	62 e0       	ldi	r22, 0x02	; 2
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_EN_PIN,MDIO_HIGH);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	62 e0       	ldi	r22, 0x02	; 2
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a0 e8       	ldi	r26, 0x80	; 128
    14f0:	bf e3       	ldi	r27, 0x3F	; 63
    14f2:	8d a7       	std	Y+45, r24	; 0x2d
    14f4:	9e a7       	std	Y+46, r25	; 0x2e
    14f6:	af a7       	std	Y+47, r26	; 0x2f
    14f8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    14fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    14fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1500:	98 a9       	ldd	r25, Y+48	; 0x30
    1502:	2b ea       	ldi	r18, 0xAB	; 171
    1504:	3a ea       	ldi	r19, 0xAA	; 170
    1506:	4a e2       	ldi	r20, 0x2A	; 42
    1508:	50 e4       	ldi	r21, 0x40	; 64
    150a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	89 a7       	std	Y+41, r24	; 0x29
    1514:	9a a7       	std	Y+42, r25	; 0x2a
    1516:	ab a7       	std	Y+43, r26	; 0x2b
    1518:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    151a:	69 a5       	ldd	r22, Y+41	; 0x29
    151c:	7a a5       	ldd	r23, Y+42	; 0x2a
    151e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1520:	9c a5       	ldd	r25, Y+44	; 0x2c
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	1c f4       	brge	.+6      	; 0x1538 <HLCD_voidWriteChar+0x94>
		__ticks = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	88 a7       	std	Y+40, r24	; 0x28
    1536:	91 c0       	rjmp	.+290    	; 0x165a <HLCD_voidWriteChar+0x1b6>
	else if (__tmp > 255)
    1538:	69 a5       	ldd	r22, Y+41	; 0x29
    153a:	7a a5       	ldd	r23, Y+42	; 0x2a
    153c:	8b a5       	ldd	r24, Y+43	; 0x2b
    153e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	53 e4       	ldi	r21, 0x43	; 67
    1548:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	0c f0       	brlt	.+2      	; 0x1552 <HLCD_voidWriteChar+0xae>
    1550:	7b c0       	rjmp	.+246    	; 0x1648 <HLCD_voidWriteChar+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    1552:	6d a5       	ldd	r22, Y+45	; 0x2d
    1554:	7e a5       	ldd	r23, Y+46	; 0x2e
    1556:	8f a5       	ldd	r24, Y+47	; 0x2f
    1558:	98 a9       	ldd	r25, Y+48	; 0x30
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	4a e7       	ldi	r20, 0x7A	; 122
    1560:	54 e4       	ldi	r21, 0x44	; 68
    1562:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	8c a3       	std	Y+36, r24	; 0x24
    156c:	9d a3       	std	Y+37, r25	; 0x25
    156e:	ae a3       	std	Y+38, r26	; 0x26
    1570:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1572:	6c a1       	ldd	r22, Y+36	; 0x24
    1574:	7d a1       	ldd	r23, Y+37	; 0x25
    1576:	8e a1       	ldd	r24, Y+38	; 0x26
    1578:	9f a1       	ldd	r25, Y+39	; 0x27
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a ef       	ldi	r20, 0xFA	; 250
    1580:	54 e4       	ldi	r21, 0x44	; 68
    1582:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	88 a3       	std	Y+32, r24	; 0x20
    158c:	99 a3       	std	Y+33, r25	; 0x21
    158e:	aa a3       	std	Y+34, r26	; 0x22
    1590:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1592:	68 a1       	ldd	r22, Y+32	; 0x20
    1594:	79 a1       	ldd	r23, Y+33	; 0x21
    1596:	8a a1       	ldd	r24, Y+34	; 0x22
    1598:	9b a1       	ldd	r25, Y+35	; 0x23
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <HLCD_voidWriteChar+0x110>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9f 8f       	std	Y+31, r25	; 0x1f
    15b0:	8e 8f       	std	Y+30, r24	; 0x1e
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <HLCD_voidWriteChar+0x18e>
	else if (__tmp > 65535)
    15b4:	68 a1       	ldd	r22, Y+32	; 0x20
    15b6:	79 a1       	ldd	r23, Y+33	; 0x21
    15b8:	8a a1       	ldd	r24, Y+34	; 0x22
    15ba:	9b a1       	ldd	r25, Y+35	; 0x23
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <HLCD_voidWriteChar+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15cc:	6c a1       	ldd	r22, Y+36	; 0x24
    15ce:	7d a1       	ldd	r23, Y+37	; 0x25
    15d0:	8e a1       	ldd	r24, Y+38	; 0x26
    15d2:	9f a1       	ldd	r25, Y+39	; 0x27
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9f 8f       	std	Y+31, r25	; 0x1f
    15f2:	8e 8f       	std	Y+30, r24	; 0x1e
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <HLCD_voidWriteChar+0x170>
    15f6:	88 ec       	ldi	r24, 0xC8	; 200
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9d 8f       	std	Y+29, r25	; 0x1d
    15fc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1600:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <HLCD_voidWriteChar+0x15e>
    1606:	9d 8f       	std	Y+29, r25	; 0x1d
    1608:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    160c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	9f 8f       	std	Y+31, r25	; 0x1f
    1612:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1616:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	69 f7       	brne	.-38     	; 0x15f6 <HLCD_voidWriteChar+0x152>
    161c:	24 c0       	rjmp	.+72     	; 0x1666 <HLCD_voidWriteChar+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	68 a1       	ldd	r22, Y+32	; 0x20
    1620:	79 a1       	ldd	r23, Y+33	; 0x21
    1622:	8a a1       	ldd	r24, Y+34	; 0x22
    1624:	9b a1       	ldd	r25, Y+35	; 0x23
    1626:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9f 8f       	std	Y+31, r25	; 0x1f
    1630:	8e 8f       	std	Y+30, r24	; 0x1e
    1632:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1634:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1636:	9b 8f       	std	Y+27, r25	; 0x1b
    1638:	8a 8f       	std	Y+26, r24	; 0x1a
    163a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    163c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <HLCD_voidWriteChar+0x19a>
    1642:	9b 8f       	std	Y+27, r25	; 0x1b
    1644:	8a 8f       	std	Y+26, r24	; 0x1a
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <HLCD_voidWriteChar+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1648:	69 a5       	ldd	r22, Y+41	; 0x29
    164a:	7a a5       	ldd	r23, Y+42	; 0x2a
    164c:	8b a5       	ldd	r24, Y+43	; 0x2b
    164e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1650:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	88 a7       	std	Y+40, r24	; 0x28
    165a:	88 a5       	ldd	r24, Y+40	; 0x28
    165c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    165e:	89 8d       	ldd	r24, Y+25	; 0x19
    1660:	8a 95       	dec	r24
    1662:	f1 f7       	brne	.-4      	; 0x1660 <HLCD_voidWriteChar+0x1bc>
    1664:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_EN_PIN,MDIO_LOW);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a0 e8       	ldi	r26, 0x80	; 128
    1676:	bf e3       	ldi	r27, 0x3F	; 63
    1678:	8d 8b       	std	Y+21, r24	; 0x15
    167a:	9e 8b       	std	Y+22, r25	; 0x16
    167c:	af 8b       	std	Y+23, r26	; 0x17
    167e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1680:	6d 89       	ldd	r22, Y+21	; 0x15
    1682:	7e 89       	ldd	r23, Y+22	; 0x16
    1684:	8f 89       	ldd	r24, Y+23	; 0x17
    1686:	98 8d       	ldd	r25, Y+24	; 0x18
    1688:	2b ea       	ldi	r18, 0xAB	; 171
    168a:	3a ea       	ldi	r19, 0xAA	; 170
    168c:	4a e2       	ldi	r20, 0x2A	; 42
    168e:	50 e4       	ldi	r21, 0x40	; 64
    1690:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	89 8b       	std	Y+17, r24	; 0x11
    169a:	9a 8b       	std	Y+18, r25	; 0x12
    169c:	ab 8b       	std	Y+19, r26	; 0x13
    169e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16a0:	69 89       	ldd	r22, Y+17	; 0x11
    16a2:	7a 89       	ldd	r23, Y+18	; 0x12
    16a4:	8b 89       	ldd	r24, Y+19	; 0x13
    16a6:	9c 89       	ldd	r25, Y+20	; 0x14
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e8       	ldi	r20, 0x80	; 128
    16ae:	5f e3       	ldi	r21, 0x3F	; 63
    16b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16b4:	88 23       	and	r24, r24
    16b6:	1c f4       	brge	.+6      	; 0x16be <HLCD_voidWriteChar+0x21a>
		__ticks = 1;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	88 8b       	std	Y+16, r24	; 0x10
    16bc:	91 c0       	rjmp	.+290    	; 0x17e0 <HLCD_voidWriteChar+0x33c>
	else if (__tmp > 255)
    16be:	69 89       	ldd	r22, Y+17	; 0x11
    16c0:	7a 89       	ldd	r23, Y+18	; 0x12
    16c2:	8b 89       	ldd	r24, Y+19	; 0x13
    16c4:	9c 89       	ldd	r25, Y+20	; 0x14
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	53 e4       	ldi	r21, 0x43	; 67
    16ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	0c f0       	brlt	.+2      	; 0x16d8 <HLCD_voidWriteChar+0x234>
    16d6:	7b c0       	rjmp	.+246    	; 0x17ce <HLCD_voidWriteChar+0x32a>
	{
		_delay_ms(__us / 1000.0);
    16d8:	6d 89       	ldd	r22, Y+21	; 0x15
    16da:	7e 89       	ldd	r23, Y+22	; 0x16
    16dc:	8f 89       	ldd	r24, Y+23	; 0x17
    16de:	98 8d       	ldd	r25, Y+24	; 0x18
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4a e7       	ldi	r20, 0x7A	; 122
    16e6:	54 e4       	ldi	r21, 0x44	; 68
    16e8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	8c 87       	std	Y+12, r24	; 0x0c
    16f2:	9d 87       	std	Y+13, r25	; 0x0d
    16f4:	ae 87       	std	Y+14, r26	; 0x0e
    16f6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    16fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    16fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    16fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	4a ef       	ldi	r20, 0xFA	; 250
    1706:	54 e4       	ldi	r21, 0x44	; 68
    1708:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	88 87       	std	Y+8, r24	; 0x08
    1712:	99 87       	std	Y+9, r25	; 0x09
    1714:	aa 87       	std	Y+10, r26	; 0x0a
    1716:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1718:	68 85       	ldd	r22, Y+8	; 0x08
    171a:	79 85       	ldd	r23, Y+9	; 0x09
    171c:	8a 85       	ldd	r24, Y+10	; 0x0a
    171e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e8       	ldi	r20, 0x80	; 128
    1726:	5f e3       	ldi	r21, 0x3F	; 63
    1728:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    172c:	88 23       	and	r24, r24
    172e:	2c f4       	brge	.+10     	; 0x173a <HLCD_voidWriteChar+0x296>
		__ticks = 1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9f 83       	std	Y+7, r25	; 0x07
    1736:	8e 83       	std	Y+6, r24	; 0x06
    1738:	3f c0       	rjmp	.+126    	; 0x17b8 <HLCD_voidWriteChar+0x314>
	else if (__tmp > 65535)
    173a:	68 85       	ldd	r22, Y+8	; 0x08
    173c:	79 85       	ldd	r23, Y+9	; 0x09
    173e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1740:	9b 85       	ldd	r25, Y+11	; 0x0b
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	3f ef       	ldi	r19, 0xFF	; 255
    1746:	4f e7       	ldi	r20, 0x7F	; 127
    1748:	57 e4       	ldi	r21, 0x47	; 71
    174a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    174e:	18 16       	cp	r1, r24
    1750:	4c f5       	brge	.+82     	; 0x17a4 <HLCD_voidWriteChar+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1752:	6c 85       	ldd	r22, Y+12	; 0x0c
    1754:	7d 85       	ldd	r23, Y+13	; 0x0d
    1756:	8e 85       	ldd	r24, Y+14	; 0x0e
    1758:	9f 85       	ldd	r25, Y+15	; 0x0f
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e2       	ldi	r20, 0x20	; 32
    1760:	51 e4       	ldi	r21, 0x41	; 65
    1762:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9f 83       	std	Y+7, r25	; 0x07
    1778:	8e 83       	std	Y+6, r24	; 0x06
    177a:	0f c0       	rjmp	.+30     	; 0x179a <HLCD_voidWriteChar+0x2f6>
    177c:	88 ec       	ldi	r24, 0xC8	; 200
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9d 83       	std	Y+5, r25	; 0x05
    1782:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <HLCD_voidWriteChar+0x2e4>
    178c:	9d 83       	std	Y+5, r25	; 0x05
    178e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1790:	8e 81       	ldd	r24, Y+6	; 0x06
    1792:	9f 81       	ldd	r25, Y+7	; 0x07
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	9f 83       	std	Y+7, r25	; 0x07
    1798:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179a:	8e 81       	ldd	r24, Y+6	; 0x06
    179c:	9f 81       	ldd	r25, Y+7	; 0x07
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	69 f7       	brne	.-38     	; 0x177c <HLCD_voidWriteChar+0x2d8>
    17a2:	24 c0       	rjmp	.+72     	; 0x17ec <HLCD_voidWriteChar+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a4:	68 85       	ldd	r22, Y+8	; 0x08
    17a6:	79 85       	ldd	r23, Y+9	; 0x09
    17a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9f 83       	std	Y+7, r25	; 0x07
    17b6:	8e 83       	std	Y+6, r24	; 0x06
    17b8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ba:	9f 81       	ldd	r25, Y+7	; 0x07
    17bc:	9b 83       	std	Y+3, r25	; 0x03
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <HLCD_voidWriteChar+0x320>
    17c8:	9b 83       	std	Y+3, r25	; 0x03
    17ca:	8a 83       	std	Y+2, r24	; 0x02
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <HLCD_voidWriteChar+0x348>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17ce:	69 89       	ldd	r22, Y+17	; 0x11
    17d0:	7a 89       	ldd	r23, Y+18	; 0x12
    17d2:	8b 89       	ldd	r24, Y+19	; 0x13
    17d4:	9c 89       	ldd	r25, Y+20	; 0x14
    17d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	88 8b       	std	Y+16, r24	; 0x10
    17e0:	88 89       	ldd	r24, Y+16	; 0x10
    17e2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	8a 95       	dec	r24
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <HLCD_voidWriteChar+0x342>
    17ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    17ec:	e1 96       	adiw	r28, 0x31	; 49
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <HLCD_voidWriteCmd>:

void HLCD_voidWriteCmd(const u8 ARG_cu8Cmd)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	e1 97       	sbiw	r28, 0x31	; 49
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	89 ab       	std	Y+49, r24	; 0x31
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_LOW);
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_LOW);
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
	MDIO_voidSetPortValue(HLCD_DATA_PORT,ARG_cu8Cmd);
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	69 a9       	ldd	r22, Y+49	; 0x31
    182c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <MDIO_voidSetPortValue>
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_EN_PIN,MDIO_LOW);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	62 e0       	ldi	r22, 0x02	; 2
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_EN_PIN,MDIO_HIGH);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	62 e0       	ldi	r22, 0x02	; 2
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e8       	ldi	r26, 0x80	; 128
    184a:	bf e3       	ldi	r27, 0x3F	; 63
    184c:	8d a7       	std	Y+45, r24	; 0x2d
    184e:	9e a7       	std	Y+46, r25	; 0x2e
    1850:	af a7       	std	Y+47, r26	; 0x2f
    1852:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1854:	6d a5       	ldd	r22, Y+45	; 0x2d
    1856:	7e a5       	ldd	r23, Y+46	; 0x2e
    1858:	8f a5       	ldd	r24, Y+47	; 0x2f
    185a:	98 a9       	ldd	r25, Y+48	; 0x30
    185c:	2b ea       	ldi	r18, 0xAB	; 171
    185e:	3a ea       	ldi	r19, 0xAA	; 170
    1860:	4a e2       	ldi	r20, 0x2A	; 42
    1862:	50 e4       	ldi	r21, 0x40	; 64
    1864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	89 a7       	std	Y+41, r24	; 0x29
    186e:	9a a7       	std	Y+42, r25	; 0x2a
    1870:	ab a7       	std	Y+43, r26	; 0x2b
    1872:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1874:	69 a5       	ldd	r22, Y+41	; 0x29
    1876:	7a a5       	ldd	r23, Y+42	; 0x2a
    1878:	8b a5       	ldd	r24, Y+43	; 0x2b
    187a:	9c a5       	ldd	r25, Y+44	; 0x2c
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	1c f4       	brge	.+6      	; 0x1892 <HLCD_voidWriteCmd+0x94>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	88 a7       	std	Y+40, r24	; 0x28
    1890:	91 c0       	rjmp	.+290    	; 0x19b4 <HLCD_voidWriteCmd+0x1b6>
	else if (__tmp > 255)
    1892:	69 a5       	ldd	r22, Y+41	; 0x29
    1894:	7a a5       	ldd	r23, Y+42	; 0x2a
    1896:	8b a5       	ldd	r24, Y+43	; 0x2b
    1898:	9c a5       	ldd	r25, Y+44	; 0x2c
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4f e7       	ldi	r20, 0x7F	; 127
    18a0:	53 e4       	ldi	r21, 0x43	; 67
    18a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18a6:	18 16       	cp	r1, r24
    18a8:	0c f0       	brlt	.+2      	; 0x18ac <HLCD_voidWriteCmd+0xae>
    18aa:	7b c0       	rjmp	.+246    	; 0x19a2 <HLCD_voidWriteCmd+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    18ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    18ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    18b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b2:	98 a9       	ldd	r25, Y+48	; 0x30
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	4a e7       	ldi	r20, 0x7A	; 122
    18ba:	54 e4       	ldi	r21, 0x44	; 68
    18bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	8c a3       	std	Y+36, r24	; 0x24
    18c6:	9d a3       	std	Y+37, r25	; 0x25
    18c8:	ae a3       	std	Y+38, r26	; 0x26
    18ca:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	6c a1       	ldd	r22, Y+36	; 0x24
    18ce:	7d a1       	ldd	r23, Y+37	; 0x25
    18d0:	8e a1       	ldd	r24, Y+38	; 0x26
    18d2:	9f a1       	ldd	r25, Y+39	; 0x27
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a ef       	ldi	r20, 0xFA	; 250
    18da:	54 e4       	ldi	r21, 0x44	; 68
    18dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	88 a3       	std	Y+32, r24	; 0x20
    18e6:	99 a3       	std	Y+33, r25	; 0x21
    18e8:	aa a3       	std	Y+34, r26	; 0x22
    18ea:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    18ec:	68 a1       	ldd	r22, Y+32	; 0x20
    18ee:	79 a1       	ldd	r23, Y+33	; 0x21
    18f0:	8a a1       	ldd	r24, Y+34	; 0x22
    18f2:	9b a1       	ldd	r25, Y+35	; 0x23
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1900:	88 23       	and	r24, r24
    1902:	2c f4       	brge	.+10     	; 0x190e <HLCD_voidWriteCmd+0x110>
		__ticks = 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9f 8f       	std	Y+31, r25	; 0x1f
    190a:	8e 8f       	std	Y+30, r24	; 0x1e
    190c:	3f c0       	rjmp	.+126    	; 0x198c <HLCD_voidWriteCmd+0x18e>
	else if (__tmp > 65535)
    190e:	68 a1       	ldd	r22, Y+32	; 0x20
    1910:	79 a1       	ldd	r23, Y+33	; 0x21
    1912:	8a a1       	ldd	r24, Y+34	; 0x22
    1914:	9b a1       	ldd	r25, Y+35	; 0x23
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	3f ef       	ldi	r19, 0xFF	; 255
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	57 e4       	ldi	r21, 0x47	; 71
    191e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1922:	18 16       	cp	r1, r24
    1924:	4c f5       	brge	.+82     	; 0x1978 <HLCD_voidWriteCmd+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1926:	6c a1       	ldd	r22, Y+36	; 0x24
    1928:	7d a1       	ldd	r23, Y+37	; 0x25
    192a:	8e a1       	ldd	r24, Y+38	; 0x26
    192c:	9f a1       	ldd	r25, Y+39	; 0x27
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e2       	ldi	r20, 0x20	; 32
    1934:	51 e4       	ldi	r21, 0x41	; 65
    1936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9f 8f       	std	Y+31, r25	; 0x1f
    194c:	8e 8f       	std	Y+30, r24	; 0x1e
    194e:	0f c0       	rjmp	.+30     	; 0x196e <HLCD_voidWriteCmd+0x170>
    1950:	88 ec       	ldi	r24, 0xC8	; 200
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9d 8f       	std	Y+29, r25	; 0x1d
    1956:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1958:	8c 8d       	ldd	r24, Y+28	; 0x1c
    195a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <HLCD_voidWriteCmd+0x15e>
    1960:	9d 8f       	std	Y+29, r25	; 0x1d
    1962:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1964:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1966:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	9f 8f       	std	Y+31, r25	; 0x1f
    196c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1970:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	69 f7       	brne	.-38     	; 0x1950 <HLCD_voidWriteCmd+0x152>
    1976:	24 c0       	rjmp	.+72     	; 0x19c0 <HLCD_voidWriteCmd+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	68 a1       	ldd	r22, Y+32	; 0x20
    197a:	79 a1       	ldd	r23, Y+33	; 0x21
    197c:	8a a1       	ldd	r24, Y+34	; 0x22
    197e:	9b a1       	ldd	r25, Y+35	; 0x23
    1980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9f 8f       	std	Y+31, r25	; 0x1f
    198a:	8e 8f       	std	Y+30, r24	; 0x1e
    198c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    198e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1990:	9b 8f       	std	Y+27, r25	; 0x1b
    1992:	8a 8f       	std	Y+26, r24	; 0x1a
    1994:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1996:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <HLCD_voidWriteCmd+0x19a>
    199c:	9b 8f       	std	Y+27, r25	; 0x1b
    199e:	8a 8f       	std	Y+26, r24	; 0x1a
    19a0:	0f c0       	rjmp	.+30     	; 0x19c0 <HLCD_voidWriteCmd+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19a2:	69 a5       	ldd	r22, Y+41	; 0x29
    19a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    19a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    19aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	88 a7       	std	Y+40, r24	; 0x28
    19b4:	88 a5       	ldd	r24, Y+40	; 0x28
    19b6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19b8:	89 8d       	ldd	r24, Y+25	; 0x19
    19ba:	8a 95       	dec	r24
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <HLCD_voidWriteCmd+0x1bc>
    19be:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	MDIO_voidSetPinValue(HLCD_CTRL_PORT,HLCD_EN_PIN,MDIO_LOW);
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	62 e0       	ldi	r22, 0x02	; 2
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	0e 94 ba 12 	call	0x2574	; 0x2574 <MDIO_voidSetPinValue>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e8       	ldi	r26, 0x80	; 128
    19d0:	bf e3       	ldi	r27, 0x3F	; 63
    19d2:	8d 8b       	std	Y+21, r24	; 0x15
    19d4:	9e 8b       	std	Y+22, r25	; 0x16
    19d6:	af 8b       	std	Y+23, r26	; 0x17
    19d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19da:	6d 89       	ldd	r22, Y+21	; 0x15
    19dc:	7e 89       	ldd	r23, Y+22	; 0x16
    19de:	8f 89       	ldd	r24, Y+23	; 0x17
    19e0:	98 8d       	ldd	r25, Y+24	; 0x18
    19e2:	2b ea       	ldi	r18, 0xAB	; 171
    19e4:	3a ea       	ldi	r19, 0xAA	; 170
    19e6:	4a e2       	ldi	r20, 0x2A	; 42
    19e8:	50 e4       	ldi	r21, 0x40	; 64
    19ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	89 8b       	std	Y+17, r24	; 0x11
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	ab 8b       	std	Y+19, r26	; 0x13
    19f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19fa:	69 89       	ldd	r22, Y+17	; 0x11
    19fc:	7a 89       	ldd	r23, Y+18	; 0x12
    19fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1a00:	9c 89       	ldd	r25, Y+20	; 0x14
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e8       	ldi	r20, 0x80	; 128
    1a08:	5f e3       	ldi	r21, 0x3F	; 63
    1a0a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a0e:	88 23       	and	r24, r24
    1a10:	1c f4       	brge	.+6      	; 0x1a18 <HLCD_voidWriteCmd+0x21a>
		__ticks = 1;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	88 8b       	std	Y+16, r24	; 0x10
    1a16:	91 c0       	rjmp	.+290    	; 0x1b3a <HLCD_voidWriteCmd+0x33c>
	else if (__tmp > 255)
    1a18:	69 89       	ldd	r22, Y+17	; 0x11
    1a1a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	53 e4       	ldi	r21, 0x43	; 67
    1a28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	0c f0       	brlt	.+2      	; 0x1a32 <HLCD_voidWriteCmd+0x234>
    1a30:	7b c0       	rjmp	.+246    	; 0x1b28 <HLCD_voidWriteCmd+0x32a>
	{
		_delay_ms(__us / 1000.0);
    1a32:	6d 89       	ldd	r22, Y+21	; 0x15
    1a34:	7e 89       	ldd	r23, Y+22	; 0x16
    1a36:	8f 89       	ldd	r24, Y+23	; 0x17
    1a38:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	4a e7       	ldi	r20, 0x7A	; 122
    1a40:	54 e4       	ldi	r21, 0x44	; 68
    1a42:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8c 87       	std	Y+12, r24	; 0x0c
    1a4c:	9d 87       	std	Y+13, r25	; 0x0d
    1a4e:	ae 87       	std	Y+14, r26	; 0x0e
    1a50:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a52:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a54:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a56:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a58:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a ef       	ldi	r20, 0xFA	; 250
    1a60:	54 e4       	ldi	r21, 0x44	; 68
    1a62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	88 87       	std	Y+8, r24	; 0x08
    1a6c:	99 87       	std	Y+9, r25	; 0x09
    1a6e:	aa 87       	std	Y+10, r26	; 0x0a
    1a70:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a72:	68 85       	ldd	r22, Y+8	; 0x08
    1a74:	79 85       	ldd	r23, Y+9	; 0x09
    1a76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <HLCD_voidWriteCmd+0x296>
		__ticks = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9f 83       	std	Y+7, r25	; 0x07
    1a90:	8e 83       	std	Y+6, r24	; 0x06
    1a92:	3f c0       	rjmp	.+126    	; 0x1b12 <HLCD_voidWriteCmd+0x314>
	else if (__tmp > 65535)
    1a94:	68 85       	ldd	r22, Y+8	; 0x08
    1a96:	79 85       	ldd	r23, Y+9	; 0x09
    1a98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	4c f5       	brge	.+82     	; 0x1afe <HLCD_voidWriteCmd+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aac:	6c 85       	ldd	r22, Y+12	; 0x0c
    1aae:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ab0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ab2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9f 83       	std	Y+7, r25	; 0x07
    1ad2:	8e 83       	std	Y+6, r24	; 0x06
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <HLCD_voidWriteCmd+0x2f6>
    1ad6:	88 ec       	ldi	r24, 0xC8	; 200
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9d 83       	std	Y+5, r25	; 0x05
    1adc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <HLCD_voidWriteCmd+0x2e4>
    1ae6:	9d 83       	std	Y+5, r25	; 0x05
    1ae8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	8e 81       	ldd	r24, Y+6	; 0x06
    1aec:	9f 81       	ldd	r25, Y+7	; 0x07
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	9f 83       	std	Y+7, r25	; 0x07
    1af2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <HLCD_voidWriteCmd+0x2d8>
    1afc:	24 c0       	rjmp	.+72     	; 0x1b46 <HLCD_voidWriteCmd+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afe:	68 85       	ldd	r22, Y+8	; 0x08
    1b00:	79 85       	ldd	r23, Y+9	; 0x09
    1b02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9f 83       	std	Y+7, r25	; 0x07
    1b10:	8e 83       	std	Y+6, r24	; 0x06
    1b12:	8e 81       	ldd	r24, Y+6	; 0x06
    1b14:	9f 81       	ldd	r25, Y+7	; 0x07
    1b16:	9b 83       	std	Y+3, r25	; 0x03
    1b18:	8a 83       	std	Y+2, r24	; 0x02
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <HLCD_voidWriteCmd+0x320>
    1b22:	9b 83       	std	Y+3, r25	; 0x03
    1b24:	8a 83       	std	Y+2, r24	; 0x02
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <HLCD_voidWriteCmd+0x348>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b28:	69 89       	ldd	r22, Y+17	; 0x11
    1b2a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	88 8b       	std	Y+16, r24	; 0x10
    1b3a:	88 89       	ldd	r24, Y+16	; 0x10
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	8a 95       	dec	r24
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <HLCD_voidWriteCmd+0x342>
    1b44:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

}
    1b46:	e1 96       	adiw	r28, 0x31	; 49
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <HLCD_voidClearScreen>:

void HLCD_voidClearScreen(void)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	2e 97       	sbiw	r28, 0x0e	; 14
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidWriteCmd(0x01);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <HLCD_voidWriteCmd>
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	a0 e0       	ldi	r26, 0x00	; 0
    1b78:	b0 e4       	ldi	r27, 0x40	; 64
    1b7a:	8b 87       	std	Y+11, r24	; 0x0b
    1b7c:	9c 87       	std	Y+12, r25	; 0x0c
    1b7e:	ad 87       	std	Y+13, r26	; 0x0d
    1b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	4a ef       	ldi	r20, 0xFA	; 250
    1b90:	54 e4       	ldi	r21, 0x44	; 68
    1b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	8f 83       	std	Y+7, r24	; 0x07
    1b9c:	98 87       	std	Y+8, r25	; 0x08
    1b9e:	a9 87       	std	Y+9, r26	; 0x09
    1ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba4:	78 85       	ldd	r23, Y+8	; 0x08
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bb6:	88 23       	and	r24, r24
    1bb8:	2c f4       	brge	.+10     	; 0x1bc4 <HLCD_voidClearScreen+0x6c>
		__ticks = 1;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
    1bc2:	3f c0       	rjmp	.+126    	; 0x1c42 <HLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    1bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc6:	78 85       	ldd	r23, Y+8	; 0x08
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	3f ef       	ldi	r19, 0xFF	; 255
    1bd0:	4f e7       	ldi	r20, 0x7F	; 127
    1bd2:	57 e4       	ldi	r21, 0x47	; 71
    1bd4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bd8:	18 16       	cp	r1, r24
    1bda:	4c f5       	brge	.+82     	; 0x1c2e <HLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e2       	ldi	r20, 0x20	; 32
    1bea:	51 e4       	ldi	r21, 0x41	; 65
    1bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <HLCD_voidClearScreen+0xcc>
    1c06:	88 ec       	ldi	r24, 0xC8	; 200
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9c 83       	std	Y+4, r25	; 0x04
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <HLCD_voidClearScreen+0xba>
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	69 f7       	brne	.-38     	; 0x1c06 <HLCD_voidClearScreen+0xae>
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <HLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c30:	78 85       	ldd	r23, Y+8	; 0x08
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	8d 81       	ldd	r24, Y+5	; 0x05
    1c44:	9e 81       	ldd	r25, Y+6	; 0x06
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <HLCD_voidClearScreen+0xf6>
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c56:	2e 96       	adiw	r28, 0x0e	; 14
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <HLCD_voidWriteString>:

void HLCD_voidWriteString(const char* ARG_ccharpString)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <HLCD_voidWriteString+0x6>
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	9b 83       	std	Y+3, r25	; 0x03
    1c76:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8i=0;
    1c78:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		HLCD_voidWriteChar(ARG_ccharpString[L_u8i]);
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	9b 81       	ldd	r25, Y+3	; 0x03
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	80 81       	ld	r24, Z
    1c8c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <HLCD_voidWriteChar>
		L_u8i++;
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	89 83       	std	Y+1, r24	; 0x01
	}
	while(ARG_ccharpString[L_u8i]!='\0');
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e2 0f       	add	r30, r18
    1ca4:	f3 1f       	adc	r31, r19
    1ca6:	80 81       	ld	r24, Z
    1ca8:	88 23       	and	r24, r24
    1caa:	39 f7       	brne	.-50     	; 0x1c7a <HLCD_voidWriteString+0x12>
}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <HLCD_voidSetCursor>:

void HLCD_voidSetCursor(u8 ARG_u8Row, u8 ARG_u8Col)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <HLCD_voidSetCursor+0x6>
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	6a 83       	std	Y+2, r22	; 0x02
	if((ARG_u8Row<=1)&&(ARG_u8Col<=15))
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	82 30       	cpi	r24, 0x02	; 2
    1cca:	a8 f4       	brcc	.+42     	; 0x1cf6 <HLCD_voidSetCursor+0x3e>
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	80 31       	cpi	r24, 0x10	; 16
    1cd0:	90 f4       	brcc	.+36     	; 0x1cf6 <HLCD_voidSetCursor+0x3e>
	{
		HLCD_voidWriteCmd((1<<7)|(ARG_u8Row<<6)|ARG_u8Col);
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	00 24       	eor	r0, r0
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	07 94       	ror	r0
    1ce0:	96 95       	lsr	r25
    1ce2:	87 95       	ror	r24
    1ce4:	07 94       	ror	r0
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	80 2d       	mov	r24, r0
    1cea:	98 2f       	mov	r25, r24
    1cec:	90 68       	ori	r25, 0x80	; 128
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	89 2b       	or	r24, r25
    1cf2:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <HLCD_voidWriteCmd>
	}
	else
	{
		/*Report an error*/
	}
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <HLCD_voidintgerToString>:
void HLCD_voidintgerToString(int data)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	62 97       	sbiw	r28, 0x12	; 18
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1d18:	89 89       	ldd	r24, Y+17	; 0x11
    1d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1c:	9e 01       	movw	r18, r28
    1d1e:	2f 5f       	subi	r18, 0xFF	; 255
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	b9 01       	movw	r22, r18
    1d24:	4a e0       	ldi	r20, 0x0A	; 10
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	0e 94 23 17 	call	0x2e46	; 0x2e46 <itoa>
   HLCD_voidWriteString(buff); /* Display the string */
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <HLCD_voidWriteString>
}
    1d34:	62 96       	adiw	r28, 0x12	; 18
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <I2c_Init>:
#include "I2c.h"

#define I2C_GET_STATUS()   (TWSR&0xF8)

void I2c_Init(void)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
#if (I2C_CFG_MODE == I2C_MASTER)
    /* Set TWBR = 2, TWPS = 0 -> SCL Frequency = 400kHz*/
    TWBR = 2;
    1d4e:	e0 e2       	ldi	r30, 0x20	; 32
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	80 83       	st	Z, r24
    CLEAR_BIT(TWSR, 0);
    1d56:	a1 e2       	ldi	r26, 0x21	; 33
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e1 e2       	ldi	r30, 0x21	; 33
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8e 7f       	andi	r24, 0xFE	; 254
    1d62:	8c 93       	st	X, r24
    CLEAR_BIT(TWSR, 1);
    1d64:	a1 e2       	ldi	r26, 0x21	; 33
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e1 e2       	ldi	r30, 0x21	; 33
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8d 7f       	andi	r24, 0xFD	; 253
    1d70:	8c 93       	st	X, r24
#endif
    /* Device Address*/
    TWAR = I2C_CFG_DEVICE_ADDRESS<<1;
    1d72:	e2 e2       	ldi	r30, 0x22	; 34
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 e4       	ldi	r24, 0x40	; 64
    1d78:	80 83       	st	Z, r24
    /* General Call Recognition Enable */
#if (I2C_CFG_GENERAL_CALL_RECOG == I2C_ON)
    SET_BIT(TWAR, 0);
#endif
    /* Enable Pull Up Resistor */
    MDIO_voidSetPinDirection(MDIO_PORTC,1,MDIO_INPUT_PULLUP);
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	4c e0       	ldi	r20, 0x0C	; 12
    1d80:	0e 94 d7 10 	call	0x21ae	; 0x21ae <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(MDIO_PORTC,0,MDIO_INPUT_PULLUP);
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	4c e0       	ldi	r20, 0x0C	; 12
    1d8a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <MDIO_voidSetPinDirection>

    /* TWI Enable Bit */
    SET_BIT(TWCR, 2);
    1d8e:	a6 e5       	ldi	r26, 0x56	; 86
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e6 e5       	ldi	r30, 0x56	; 86
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	84 60       	ori	r24, 0x04	; 4
    1d9a:	8c 93       	st	X, r24
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <I2c_SendStart>:

I2c_StatusType I2c_SendStart(void)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    /* Set Start Condition Bit */
    SET_BIT(TWCR, 5);
    1daa:	a6 e5       	ldi	r26, 0x56	; 86
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e6 e5       	ldi	r30, 0x56	; 86
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 62       	ori	r24, 0x20	; 32
    1db6:	8c 93       	st	X, r24
    /* Wait for Flag */
    while (GET_BIT(TWCR, 7) == 0);
    1db8:	e6 e5       	ldi	r30, 0x56	; 86
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	88 23       	and	r24, r24
    1dc0:	dc f7       	brge	.-10     	; 0x1db8 <I2c_SendStart+0x16>
    /* Return Status Code */
    return I2C_GET_STATUS();
    1dc2:	e1 e2       	ldi	r30, 0x21	; 33
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 7f       	andi	r24, 0xF8	; 248
}
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <I2c_SendSlaveAddress>:

I2c_StatusType I2c_SendSlaveAddress(u8 address, I2c_RequestType request)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <I2c_SendSlaveAddress+0x6>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	6a 83       	std	Y+2, r22	; 0x02
    /* Write SA + Request*/
    TWDR = address<<1 | (request&1);
    1dde:	e3 e2       	ldi	r30, 0x23	; 35
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	98 2f       	mov	r25, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	89 2b       	or	r24, r25
    1df4:	80 83       	st	Z, r24
    /* Clear Start Condition Bit and Flag */
    TWCR &= ~((1<<5) | (1<<7));
    1df6:	a6 e5       	ldi	r26, 0x56	; 86
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e6 e5       	ldi	r30, 0x56	; 86
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	8f 75       	andi	r24, 0x5F	; 95
    1e02:	8c 93       	st	X, r24
    /* Wait for Flag */
    while (GET_BIT(TWCR, 7) == 0);
    1e04:	e6 e5       	ldi	r30, 0x56	; 86
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	88 23       	and	r24, r24
    1e0c:	dc f7       	brge	.-10     	; 0x1e04 <I2c_SendSlaveAddress+0x34>
    /* Return Status Code */
    return I2C_GET_STATUS();
    1e0e:	e1 e2       	ldi	r30, 0x21	; 33
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	88 7f       	andi	r24, 0xF8	; 248
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <I2c_WriteData>:

I2c_StatusType I2c_WriteData(u8 data)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    /* Write Data */
    TWDR = data;
    1e2c:	e3 e2       	ldi	r30, 0x23	; 35
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	80 83       	st	Z, r24
    /* Clear Flag */
    CLEAR_BIT(TWCR, 7);
    1e34:	a6 e5       	ldi	r26, 0x56	; 86
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e6 e5       	ldi	r30, 0x56	; 86
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8f 77       	andi	r24, 0x7F	; 127
    1e40:	8c 93       	st	X, r24
    /* Wait for Flag */
    while (GET_BIT(TWCR, 7) == 0);
    1e42:	e6 e5       	ldi	r30, 0x56	; 86
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	88 23       	and	r24, r24
    1e4a:	dc f7       	brge	.-10     	; 0x1e42 <I2c_WriteData+0x22>
    /* Return Status Code */
    return I2C_GET_STATUS();
    1e4c:	e1 e2       	ldi	r30, 0x21	; 33
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	88 7f       	andi	r24, 0xF8	; 248
}
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <I2c_ReadData>:

I2c_StatusType I2c_ReadData(u8* data)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <I2c_ReadData+0x6>
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
    /* Clear Flag */
    CLEAR_BIT(TWCR, 7);
    1e6a:	a6 e5       	ldi	r26, 0x56	; 86
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e6 e5       	ldi	r30, 0x56	; 86
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8f 77       	andi	r24, 0x7F	; 127
    1e76:	8c 93       	st	X, r24
    /* Wait for Flag */
    while (GET_BIT(TWCR, 7) == 0);
    1e78:	e6 e5       	ldi	r30, 0x56	; 86
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 23       	and	r24, r24
    1e80:	dc f7       	brge	.-10     	; 0x1e78 <I2c_ReadData+0x1c>
    /* Read Data */
    *data = TWDR;
    1e82:	e3 e2       	ldi	r30, 0x23	; 35
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8c:	80 83       	st	Z, r24
    /* Return Status Code */
    return I2C_GET_STATUS();
    1e8e:	e1 e2       	ldi	r30, 0x21	; 33
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 7f       	andi	r24, 0xF8	; 248
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <I2c_SendStop>:

void I2c_SendStop(void)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    /* Clear Flag, Set Stop bit, Enable TWI*/
    TWCR = (1<<7) | (1<<4) | (1<<2);
    1ea8:	e6 e5       	ldi	r30, 0x56	; 86
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	84 e9       	ldi	r24, 0x94	; 148
    1eae:	80 83       	st	Z, r24
}
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <I2c_EnableAck>:

void I2c_EnableAck(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TWCR, 6);
    1ebe:	a6 e5       	ldi	r26, 0x56	; 86
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e6 e5       	ldi	r30, 0x56	; 86
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 64       	ori	r24, 0x40	; 64
    1eca:	8c 93       	st	X, r24
}
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <I2c_DisableAck>:

void I2c_DisableAck(void)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(TWCR, 6);
    1eda:	a6 e5       	ldi	r26, 0x56	; 86
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 e5       	ldi	r30, 0x56	; 86
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8f 7b       	andi	r24, 0xBF	; 191
    1ee6:	8c 93       	st	X, r24
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <I2c_MasterTransmit>:

I2c_ErrorType I2c_MasterTransmit(u8 slaveAddress, u8* dataBuffer, u8 length)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <I2c_MasterTransmit+0x6>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <I2c_MasterTransmit+0x8>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <I2c_MasterTransmit+0xa>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	8a 83       	std	Y+2, r24	; 0x02
    1efe:	7c 83       	std	Y+4, r23	; 0x04
    1f00:	6b 83       	std	Y+3, r22	; 0x03
    1f02:	4d 83       	std	Y+5, r20	; 0x05
    I2c_StatusType status;
    status = I2c_SendStart();
    1f04:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <I2c_SendStart>
    1f08:	89 83       	std	Y+1, r24	; 0x01
    if (I2C_STATUS_MASTER_START_SENT != status)
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	88 30       	cpi	r24, 0x08	; 8
    1f0e:	19 f0       	breq	.+6      	; 0x1f16 <I2c_MasterTransmit+0x28>
    {
        return I2C_ERROR_START_NOT_SENT;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	8e 83       	std	Y+6, r24	; 0x06
    1f14:	29 c0       	rjmp	.+82     	; 0x1f68 <I2c_MasterTransmit+0x7a>
    }
    status = I2c_SendSlaveAddress(slaveAddress, I2C_REQ_WRITE);
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <I2c_SendSlaveAddress>
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    if (I2C_STATUS_MASTER_SA_W_ACK != status)
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	88 31       	cpi	r24, 0x18	; 24
    1f24:	d9 f0       	breq	.+54     	; 0x1f5c <I2c_MasterTransmit+0x6e>
    {
        I2c_SendStop();
    1f26:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <I2c_SendStop>
        return I2C_ERROR_SLAVE_NOT_RESPOND;
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	8e 83       	std	Y+6, r24	; 0x06
    1f2e:	1c c0       	rjmp	.+56     	; 0x1f68 <I2c_MasterTransmit+0x7a>
    }
    while (length > 0)
    {
        status = I2c_WriteData(*dataBuffer);
    1f30:	eb 81       	ldd	r30, Y+3	; 0x03
    1f32:	fc 81       	ldd	r31, Y+4	; 0x04
    1f34:	80 81       	ld	r24, Z
    1f36:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <I2c_WriteData>
    1f3a:	89 83       	std	Y+1, r24	; 0x01
        if (I2C_STATUS_MASTER_DATA_SENT_ACK != status)
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	88 32       	cpi	r24, 0x28	; 40
    1f40:	29 f0       	breq	.+10     	; 0x1f4c <I2c_MasterTransmit+0x5e>
        {
            I2c_SendStop();
    1f42:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <I2c_SendStop>
            return I2C_ERROR_DATA_NOT_SENT;
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	8e 83       	std	Y+6, r24	; 0x06
    1f4a:	0e c0       	rjmp	.+28     	; 0x1f68 <I2c_MasterTransmit+0x7a>
        }
        length--;
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	81 50       	subi	r24, 0x01	; 1
    1f50:	8d 83       	std	Y+5, r24	; 0x05
        dataBuffer++;
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
    if (I2C_STATUS_MASTER_SA_W_ACK != status)
    {
        I2c_SendStop();
        return I2C_ERROR_SLAVE_NOT_RESPOND;
    }
    while (length > 0)
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	88 23       	and	r24, r24
    1f60:	39 f7       	brne	.-50     	; 0x1f30 <I2c_MasterTransmit+0x42>
            return I2C_ERROR_DATA_NOT_SENT;
        }
        length--;
        dataBuffer++;
    }
    I2c_SendStop();
    1f62:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <I2c_SendStop>
    return I2C_NO_ERROR;
    1f66:	1e 82       	std	Y+6, r1	; 0x06
    1f68:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1f6a:	26 96       	adiw	r28, 0x06	; 6
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <I2c_SlaveReceive>:

I2c_ErrorType I2c_SlaveReceive(u8* dataBuffer, u8 length)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <I2c_SlaveReceive+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <I2c_SlaveReceive+0x8>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	6b 83       	std	Y+3, r22	; 0x03
    I2c_EnableAck();
    1f8e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <I2c_EnableAck>

    while (GET_BIT(TWCR, 7) == 0);
    1f92:	e6 e5       	ldi	r30, 0x56	; 86
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	88 23       	and	r24, r24
    1f9a:	dc f7       	brge	.-10     	; 0x1f92 <I2c_SlaveReceive+0x16>

    if (I2C_STATUS_SLAVE_SA_W_RECEIVED != I2C_GET_STATUS())
    1f9c:	e1 e2       	ldi	r30, 0x21	; 33
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	88 7f       	andi	r24, 0xF8	; 248
    1fa8:	90 70       	andi	r25, 0x00	; 0
    1faa:	80 36       	cpi	r24, 0x60	; 96
    1fac:	91 05       	cpc	r25, r1
    1fae:	31 f1       	breq	.+76     	; 0x1ffc <I2c_SlaveReceive+0x80>
    {
        I2c_DisableAck();
    1fb0:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <I2c_DisableAck>
        /* Clear Flag */
        SET_BIT(TWCR,7);
    1fb4:	a6 e5       	ldi	r26, 0x56	; 86
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e6 e5       	ldi	r30, 0x56	; 86
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 68       	ori	r24, 0x80	; 128
    1fc0:	8c 93       	st	X, r24
        return I2C_ERROR_SA_W_NOT_RECEIVED;
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	8c 83       	std	Y+4, r24	; 0x04
    1fc6:	27 c0       	rjmp	.+78     	; 0x2016 <I2c_SlaveReceive+0x9a>
    }
    while (length > 0)
    {
        if (I2C_STATUS_SLAVE_SA_DATA_RECEIVED_ACK != I2c_ReadData(dataBuffer))
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <I2c_ReadData>
    1fd0:	80 38       	cpi	r24, 0x80	; 128
    1fd2:	61 f0       	breq	.+24     	; 0x1fec <I2c_SlaveReceive+0x70>
        {
            I2c_DisableAck();
    1fd4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <I2c_DisableAck>
            /* Clear Flag */
            SET_BIT(TWCR,7);
    1fd8:	a6 e5       	ldi	r26, 0x56	; 86
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 e5       	ldi	r30, 0x56	; 86
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	80 68       	ori	r24, 0x80	; 128
    1fe4:	8c 93       	st	X, r24
            return I2C_ERROR_DATA_NOT_RECEIVED;
    1fe6:	85 e0       	ldi	r24, 0x05	; 5
    1fe8:	8c 83       	std	Y+4, r24	; 0x04
    1fea:	15 c0       	rjmp	.+42     	; 0x2016 <I2c_SlaveReceive+0x9a>

        }
        dataBuffer++;
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
        length--;
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	81 50       	subi	r24, 0x01	; 1
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
        I2c_DisableAck();
        /* Clear Flag */
        SET_BIT(TWCR,7);
        return I2C_ERROR_SA_W_NOT_RECEIVED;
    }
    while (length > 0)
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	88 23       	and	r24, r24
    2000:	19 f7       	brne	.-58     	; 0x1fc8 <I2c_SlaveReceive+0x4c>
        }
        dataBuffer++;
        length--;
    }
    /* Clear Flag */
    SET_BIT(TWCR, 7);
    2002:	a6 e5       	ldi	r26, 0x56	; 86
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e6 e5       	ldi	r30, 0x56	; 86
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	80 68       	ori	r24, 0x80	; 128
    200e:	8c 93       	st	X, r24
    I2c_DisableAck();
    2010:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <I2c_DisableAck>
    return I2C_NO_ERROR;
    2014:	1c 82       	std	Y+4, r1	; 0x04
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <MDIO_voidSetPortDirection>:
#include "MDIO_interface.h"
#include "MDIO_private.h"


void MDIO_voidSetPortDirection(u8 ARG_u8Port,u8 ARG_u8Direction)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <MDIO_voidSetPortDirection+0x6>
    202c:	00 d0       	rcall	.+0      	; 0x202e <MDIO_voidSetPortDirection+0x8>
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	6a 83       	std	Y+2, r22	; 0x02
	switch(ARG_u8Port)
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	3c 83       	std	Y+4, r19	; 0x04
    203e:	2b 83       	std	Y+3, r18	; 0x03
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	91 05       	cpc	r25, r1
    2048:	d1 f0       	breq	.+52     	; 0x207e <MDIO_voidSetPortDirection+0x58>
    204a:	2b 81       	ldd	r18, Y+3	; 0x03
    204c:	3c 81       	ldd	r19, Y+4	; 0x04
    204e:	22 30       	cpi	r18, 0x02	; 2
    2050:	31 05       	cpc	r19, r1
    2052:	2c f4       	brge	.+10     	; 0x205e <MDIO_voidSetPortDirection+0x38>
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	61 f0       	breq	.+24     	; 0x2074 <MDIO_voidSetPortDirection+0x4e>
    205c:	1e c0       	rjmp	.+60     	; 0x209a <MDIO_voidSetPortDirection+0x74>
    205e:	2b 81       	ldd	r18, Y+3	; 0x03
    2060:	3c 81       	ldd	r19, Y+4	; 0x04
    2062:	22 30       	cpi	r18, 0x02	; 2
    2064:	31 05       	cpc	r19, r1
    2066:	81 f0       	breq	.+32     	; 0x2088 <MDIO_voidSetPortDirection+0x62>
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	83 30       	cpi	r24, 0x03	; 3
    206e:	91 05       	cpc	r25, r1
    2070:	81 f0       	breq	.+32     	; 0x2092 <MDIO_voidSetPortDirection+0x6c>
    2072:	13 c0       	rjmp	.+38     	; 0x209a <MDIO_voidSetPortDirection+0x74>
	{
		case MDIO_PORTA : GPIOA -> DDR = ARG_u8Direction; break;
    2074:	e9 e3       	ldi	r30, 0x39	; 57
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	81 83       	std	Z+1, r24	; 0x01
    207c:	0e c0       	rjmp	.+28     	; 0x209a <MDIO_voidSetPortDirection+0x74>
		case MDIO_PORTB : GPIOB -> DDR = ARG_u8Direction; break;
    207e:	e6 e3       	ldi	r30, 0x36	; 54
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	81 83       	std	Z+1, r24	; 0x01
    2086:	09 c0       	rjmp	.+18     	; 0x209a <MDIO_voidSetPortDirection+0x74>
		case MDIO_PORTC : GPIOC -> DDR = ARG_u8Direction; break;
    2088:	e3 e3       	ldi	r30, 0x33	; 51
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	81 83       	std	Z+1, r24	; 0x01
    2090:	04 c0       	rjmp	.+8      	; 0x209a <MDIO_voidSetPortDirection+0x74>
		case MDIO_PORTD : GPIOD -> DDR = ARG_u8Direction; break;
    2092:	e0 e3       	ldi	r30, 0x30	; 48
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	81 83       	std	Z+1, r24	; 0x01
		default : /* Wrong case*/ break;
	}
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 ARG_u8Port,u8 ARG_u8Value )
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <MDIO_voidSetPortValue+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <MDIO_voidSetPortValue+0x8>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(ARG_u8Port)
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	3c 83       	std	Y+4, r19	; 0x04
    20c0:	2b 83       	std	Y+3, r18	; 0x03
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	81 30       	cpi	r24, 0x01	; 1
    20c8:	91 05       	cpc	r25, r1
    20ca:	d1 f0       	breq	.+52     	; 0x2100 <MDIO_voidSetPortValue+0x58>
    20cc:	2b 81       	ldd	r18, Y+3	; 0x03
    20ce:	3c 81       	ldd	r19, Y+4	; 0x04
    20d0:	22 30       	cpi	r18, 0x02	; 2
    20d2:	31 05       	cpc	r19, r1
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <MDIO_voidSetPortValue+0x38>
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	61 f0       	breq	.+24     	; 0x20f6 <MDIO_voidSetPortValue+0x4e>
    20de:	1e c0       	rjmp	.+60     	; 0x211c <MDIO_voidSetPortValue+0x74>
    20e0:	2b 81       	ldd	r18, Y+3	; 0x03
    20e2:	3c 81       	ldd	r19, Y+4	; 0x04
    20e4:	22 30       	cpi	r18, 0x02	; 2
    20e6:	31 05       	cpc	r19, r1
    20e8:	81 f0       	breq	.+32     	; 0x210a <MDIO_voidSetPortValue+0x62>
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	83 30       	cpi	r24, 0x03	; 3
    20f0:	91 05       	cpc	r25, r1
    20f2:	81 f0       	breq	.+32     	; 0x2114 <MDIO_voidSetPortValue+0x6c>
    20f4:	13 c0       	rjmp	.+38     	; 0x211c <MDIO_voidSetPortValue+0x74>
	{
		case MDIO_PORTA : GPIOA -> PORT = ARG_u8Value; break;
    20f6:	e9 e3       	ldi	r30, 0x39	; 57
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	82 83       	std	Z+2, r24	; 0x02
    20fe:	0e c0       	rjmp	.+28     	; 0x211c <MDIO_voidSetPortValue+0x74>
		case MDIO_PORTB : GPIOB -> PORT = ARG_u8Value; break;
    2100:	e6 e3       	ldi	r30, 0x36	; 54
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	82 83       	std	Z+2, r24	; 0x02
    2108:	09 c0       	rjmp	.+18     	; 0x211c <MDIO_voidSetPortValue+0x74>
		case MDIO_PORTC : GPIOC -> PORT = ARG_u8Value; break;
    210a:	e3 e3       	ldi	r30, 0x33	; 51
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	82 83       	std	Z+2, r24	; 0x02
    2112:	04 c0       	rjmp	.+8      	; 0x211c <MDIO_voidSetPortValue+0x74>
		case MDIO_PORTD : GPIOD -> PORT = ARG_u8Value; break;
    2114:	e0 e3       	ldi	r30, 0x30	; 48
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	82 83       	std	Z+2, r24	; 0x02
		default : /* Wrong case*/ break;
	}
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <MDIO_u8GetPortValue>:

u8 	 MDIO_u8GetPortValue(u8 ARG_u8Port)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <MDIO_u8GetPortValue+0x6>
    2130:	00 d0       	rcall	.+0      	; 0x2132 <MDIO_u8GetPortValue+0x8>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8Value=0;
    2138:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3c 83       	std	Y+4, r19	; 0x04
    2142:	2b 83       	std	Y+3, r18	; 0x03
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	91 05       	cpc	r25, r1
    214c:	d1 f0       	breq	.+52     	; 0x2182 <MDIO_u8GetPortValue+0x58>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	2c f4       	brge	.+10     	; 0x2162 <MDIO_u8GetPortValue+0x38>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	61 f0       	breq	.+24     	; 0x2178 <MDIO_u8GetPortValue+0x4e>
    2160:	1e c0       	rjmp	.+60     	; 0x219e <MDIO_u8GetPortValue+0x74>
    2162:	2b 81       	ldd	r18, Y+3	; 0x03
    2164:	3c 81       	ldd	r19, Y+4	; 0x04
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	81 f0       	breq	.+32     	; 0x218c <MDIO_u8GetPortValue+0x62>
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	83 30       	cpi	r24, 0x03	; 3
    2172:	91 05       	cpc	r25, r1
    2174:	81 f0       	breq	.+32     	; 0x2196 <MDIO_u8GetPortValue+0x6c>
    2176:	13 c0       	rjmp	.+38     	; 0x219e <MDIO_u8GetPortValue+0x74>
	{
		case MDIO_PORTA : L_u8Value = GPIOA -> PIN ; break;
    2178:	e9 e3       	ldi	r30, 0x39	; 57
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	0e c0       	rjmp	.+28     	; 0x219e <MDIO_u8GetPortValue+0x74>
		case MDIO_PORTB : L_u8Value = GPIOB -> PIN ; break;
    2182:	e6 e3       	ldi	r30, 0x36	; 54
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	09 c0       	rjmp	.+18     	; 0x219e <MDIO_u8GetPortValue+0x74>
		case MDIO_PORTC : L_u8Value = GPIOC -> PIN ; break;
    218c:	e3 e3       	ldi	r30, 0x33	; 51
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	04 c0       	rjmp	.+8      	; 0x219e <MDIO_u8GetPortValue+0x74>
		case MDIO_PORTD : L_u8Value = GPIOD -> PIN ; break;
    2196:	e0 e3       	ldi	r30, 0x30	; 48
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	89 83       	std	Y+1, r24	; 0x01
		default : /* Wrong case*/ break;
	}
	return L_u8Value;
    219e:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <MDIO_voidSetPinDirection>:


void MDIO_voidSetPinDirection(u8 ARG_u8Port,u8 ARG_u8Pin,u8 ARG_u8Direction)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	29 97       	sbiw	r28, 0x09	; 9
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	6a 83       	std	Y+2, r22	; 0x02
    21c6:	4b 83       	std	Y+3, r20	; 0x03
	if(ARG_u8Pin<=7)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	88 30       	cpi	r24, 0x08	; 8
    21cc:	08 f0       	brcs	.+2      	; 0x21d0 <MDIO_voidSetPinDirection+0x22>
    21ce:	c9 c1       	rjmp	.+914    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
	{
		if(MDIO_OUTPUT==ARG_u8Direction)
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	8b 30       	cpi	r24, 0x0B	; 11
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <MDIO_voidSetPinDirection+0x2a>
    21d6:	78 c0       	rjmp	.+240    	; 0x22c8 <MDIO_voidSetPinDirection+0x11a>
		{
			switch(ARG_u8Port)
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	39 87       	std	Y+9, r19	; 0x09
    21e0:	28 87       	std	Y+8, r18	; 0x08
    21e2:	88 85       	ldd	r24, Y+8	; 0x08
    21e4:	99 85       	ldd	r25, Y+9	; 0x09
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	61 f1       	breq	.+88     	; 0x2244 <MDIO_voidSetPinDirection+0x96>
    21ec:	28 85       	ldd	r18, Y+8	; 0x08
    21ee:	39 85       	ldd	r19, Y+9	; 0x09
    21f0:	22 30       	cpi	r18, 0x02	; 2
    21f2:	31 05       	cpc	r19, r1
    21f4:	2c f4       	brge	.+10     	; 0x2200 <MDIO_voidSetPinDirection+0x52>
    21f6:	88 85       	ldd	r24, Y+8	; 0x08
    21f8:	99 85       	ldd	r25, Y+9	; 0x09
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f0       	breq	.+26     	; 0x2218 <MDIO_voidSetPinDirection+0x6a>
    21fe:	b1 c1       	rjmp	.+866    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
    2200:	28 85       	ldd	r18, Y+8	; 0x08
    2202:	39 85       	ldd	r19, Y+9	; 0x09
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	99 f1       	breq	.+102    	; 0x2270 <MDIO_voidSetPinDirection+0xc2>
    220a:	88 85       	ldd	r24, Y+8	; 0x08
    220c:	99 85       	ldd	r25, Y+9	; 0x09
    220e:	83 30       	cpi	r24, 0x03	; 3
    2210:	91 05       	cpc	r25, r1
    2212:	09 f4       	brne	.+2      	; 0x2216 <MDIO_voidSetPinDirection+0x68>
    2214:	43 c0       	rjmp	.+134    	; 0x229c <MDIO_voidSetPinDirection+0xee>
    2216:	a5 c1       	rjmp	.+842    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			{
			case MDIO_PORTA: SET_BIT(GPIOA->DDR, ARG_u8Pin);break;
    2218:	a9 e3       	ldi	r26, 0x39	; 57
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e9 e3       	ldi	r30, 0x39	; 57
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	81 81       	ldd	r24, Z+1	; 0x01
    2222:	48 2f       	mov	r20, r24
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	02 2e       	mov	r0, r18
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <MDIO_voidSetPinDirection+0x88>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	0a 94       	dec	r0
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <MDIO_voidSetPinDirection+0x84>
    223a:	84 2b       	or	r24, r20
    223c:	11 96       	adiw	r26, 0x01	; 1
    223e:	8c 93       	st	X, r24
    2240:	11 97       	sbiw	r26, 0x01	; 1
    2242:	8f c1       	rjmp	.+798    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTB: SET_BIT(GPIOB->DDR, ARG_u8Pin);break;
    2244:	a6 e3       	ldi	r26, 0x36	; 54
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e6 e3       	ldi	r30, 0x36	; 54
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	81 81       	ldd	r24, Z+1	; 0x01
    224e:	48 2f       	mov	r20, r24
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	02 2e       	mov	r0, r18
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <MDIO_voidSetPinDirection+0xb4>
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	0a 94       	dec	r0
    2264:	e2 f7       	brpl	.-8      	; 0x225e <MDIO_voidSetPinDirection+0xb0>
    2266:	84 2b       	or	r24, r20
    2268:	11 96       	adiw	r26, 0x01	; 1
    226a:	8c 93       	st	X, r24
    226c:	11 97       	sbiw	r26, 0x01	; 1
    226e:	79 c1       	rjmp	.+754    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTC: SET_BIT(GPIOC->DDR, ARG_u8Pin);break;
    2270:	a3 e3       	ldi	r26, 0x33	; 51
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e3 e3       	ldi	r30, 0x33	; 51
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	81 81       	ldd	r24, Z+1	; 0x01
    227a:	48 2f       	mov	r20, r24
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	02 2e       	mov	r0, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <MDIO_voidSetPinDirection+0xe0>
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	0a 94       	dec	r0
    2290:	e2 f7       	brpl	.-8      	; 0x228a <MDIO_voidSetPinDirection+0xdc>
    2292:	84 2b       	or	r24, r20
    2294:	11 96       	adiw	r26, 0x01	; 1
    2296:	8c 93       	st	X, r24
    2298:	11 97       	sbiw	r26, 0x01	; 1
    229a:	63 c1       	rjmp	.+710    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTD: SET_BIT(GPIOD->DDR, ARG_u8Pin);break;
    229c:	a0 e3       	ldi	r26, 0x30	; 48
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e0 e3       	ldi	r30, 0x30	; 48
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	81 81       	ldd	r24, Z+1	; 0x01
    22a6:	48 2f       	mov	r20, r24
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <MDIO_voidSetPinDirection+0x10c>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <MDIO_voidSetPinDirection+0x108>
    22be:	84 2b       	or	r24, r20
    22c0:	11 96       	adiw	r26, 0x01	; 1
    22c2:	8c 93       	st	X, r24
    22c4:	11 97       	sbiw	r26, 0x01	; 1
    22c6:	4d c1       	rjmp	.+666    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			default : /* Wrong case*/ break;
			}
		}
		else if(MDIO_INPUT==ARG_u8Direction)
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	8a 30       	cpi	r24, 0x0A	; 10
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <MDIO_voidSetPinDirection+0x122>
    22ce:	7c c0       	rjmp	.+248    	; 0x23c8 <MDIO_voidSetPinDirection+0x21a>
		{
			switch(ARG_u8Port)
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	3f 83       	std	Y+7, r19	; 0x07
    22d8:	2e 83       	std	Y+6, r18	; 0x06
    22da:	8e 81       	ldd	r24, Y+6	; 0x06
    22dc:	9f 81       	ldd	r25, Y+7	; 0x07
    22de:	81 30       	cpi	r24, 0x01	; 1
    22e0:	91 05       	cpc	r25, r1
    22e2:	69 f1       	breq	.+90     	; 0x233e <MDIO_voidSetPinDirection+0x190>
    22e4:	2e 81       	ldd	r18, Y+6	; 0x06
    22e6:	3f 81       	ldd	r19, Y+7	; 0x07
    22e8:	22 30       	cpi	r18, 0x02	; 2
    22ea:	31 05       	cpc	r19, r1
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <MDIO_voidSetPinDirection+0x14a>
    22ee:	8e 81       	ldd	r24, Y+6	; 0x06
    22f0:	9f 81       	ldd	r25, Y+7	; 0x07
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	69 f0       	breq	.+26     	; 0x2310 <MDIO_voidSetPinDirection+0x162>
    22f6:	35 c1       	rjmp	.+618    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
    22f8:	2e 81       	ldd	r18, Y+6	; 0x06
    22fa:	3f 81       	ldd	r19, Y+7	; 0x07
    22fc:	22 30       	cpi	r18, 0x02	; 2
    22fe:	31 05       	cpc	r19, r1
    2300:	a9 f1       	breq	.+106    	; 0x236c <MDIO_voidSetPinDirection+0x1be>
    2302:	8e 81       	ldd	r24, Y+6	; 0x06
    2304:	9f 81       	ldd	r25, Y+7	; 0x07
    2306:	83 30       	cpi	r24, 0x03	; 3
    2308:	91 05       	cpc	r25, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <MDIO_voidSetPinDirection+0x160>
    230c:	46 c0       	rjmp	.+140    	; 0x239a <MDIO_voidSetPinDirection+0x1ec>
    230e:	29 c1       	rjmp	.+594    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			{
			case MDIO_PORTA: CLEAR_BIT(GPIOA->DDR, ARG_u8Pin);break;
    2310:	a9 e3       	ldi	r26, 0x39	; 57
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e9 e3       	ldi	r30, 0x39	; 57
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	81 81       	ldd	r24, Z+1	; 0x01
    231a:	48 2f       	mov	r20, r24
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	02 2e       	mov	r0, r18
    2328:	02 c0       	rjmp	.+4      	; 0x232e <MDIO_voidSetPinDirection+0x180>
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	0a 94       	dec	r0
    2330:	e2 f7       	brpl	.-8      	; 0x232a <MDIO_voidSetPinDirection+0x17c>
    2332:	80 95       	com	r24
    2334:	84 23       	and	r24, r20
    2336:	11 96       	adiw	r26, 0x01	; 1
    2338:	8c 93       	st	X, r24
    233a:	11 97       	sbiw	r26, 0x01	; 1
    233c:	12 c1       	rjmp	.+548    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTB: CLEAR_BIT(GPIOB->DDR, ARG_u8Pin);break;
    233e:	a6 e3       	ldi	r26, 0x36	; 54
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e6 e3       	ldi	r30, 0x36	; 54
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	81 81       	ldd	r24, Z+1	; 0x01
    2348:	48 2f       	mov	r20, r24
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 2e       	mov	r0, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <MDIO_voidSetPinDirection+0x1ae>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <MDIO_voidSetPinDirection+0x1aa>
    2360:	80 95       	com	r24
    2362:	84 23       	and	r24, r20
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	8c 93       	st	X, r24
    2368:	11 97       	sbiw	r26, 0x01	; 1
    236a:	fb c0       	rjmp	.+502    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTC: CLEAR_BIT(GPIOC->DDR, ARG_u8Pin);break;
    236c:	a3 e3       	ldi	r26, 0x33	; 51
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e3 e3       	ldi	r30, 0x33	; 51
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	81 81       	ldd	r24, Z+1	; 0x01
    2376:	48 2f       	mov	r20, r24
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <MDIO_voidSetPinDirection+0x1dc>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <MDIO_voidSetPinDirection+0x1d8>
    238e:	80 95       	com	r24
    2390:	84 23       	and	r24, r20
    2392:	11 96       	adiw	r26, 0x01	; 1
    2394:	8c 93       	st	X, r24
    2396:	11 97       	sbiw	r26, 0x01	; 1
    2398:	e4 c0       	rjmp	.+456    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTD: CLEAR_BIT(GPIOD->DDR, ARG_u8Pin);break;
    239a:	a0 e3       	ldi	r26, 0x30	; 48
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e0 e3       	ldi	r30, 0x30	; 48
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	81 81       	ldd	r24, Z+1	; 0x01
    23a4:	48 2f       	mov	r20, r24
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <MDIO_voidSetPinDirection+0x20a>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <MDIO_voidSetPinDirection+0x206>
    23bc:	80 95       	com	r24
    23be:	84 23       	and	r24, r20
    23c0:	11 96       	adiw	r26, 0x01	; 1
    23c2:	8c 93       	st	X, r24
    23c4:	11 97       	sbiw	r26, 0x01	; 1
    23c6:	cd c0       	rjmp	.+410    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			default : /* Wrong case*/ break;
			}
		}
		else if(MDIO_INPUT_PULLUP==ARG_u8Direction)
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	8c 30       	cpi	r24, 0x0C	; 12
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <MDIO_voidSetPinDirection+0x222>
    23ce:	c9 c0       	rjmp	.+402    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
		{
			switch(ARG_u8Port)
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	3d 83       	std	Y+5, r19	; 0x05
    23d8:	2c 83       	std	Y+4, r18	; 0x04
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	9d 81       	ldd	r25, Y+5	; 0x05
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	91 05       	cpc	r25, r1
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <MDIO_voidSetPinDirection+0x238>
    23e4:	41 c0       	rjmp	.+130    	; 0x2468 <MDIO_voidSetPinDirection+0x2ba>
    23e6:	2c 81       	ldd	r18, Y+4	; 0x04
    23e8:	3d 81       	ldd	r19, Y+5	; 0x05
    23ea:	22 30       	cpi	r18, 0x02	; 2
    23ec:	31 05       	cpc	r19, r1
    23ee:	2c f4       	brge	.+10     	; 0x23fa <MDIO_voidSetPinDirection+0x24c>
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	9d 81       	ldd	r25, Y+5	; 0x05
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	71 f0       	breq	.+28     	; 0x2414 <MDIO_voidSetPinDirection+0x266>
    23f8:	b4 c0       	rjmp	.+360    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
    23fa:	2c 81       	ldd	r18, Y+4	; 0x04
    23fc:	3d 81       	ldd	r19, Y+5	; 0x05
    23fe:	22 30       	cpi	r18, 0x02	; 2
    2400:	31 05       	cpc	r19, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <MDIO_voidSetPinDirection+0x258>
    2404:	5b c0       	rjmp	.+182    	; 0x24bc <MDIO_voidSetPinDirection+0x30e>
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	91 05       	cpc	r25, r1
    240e:	09 f4       	brne	.+2      	; 0x2412 <MDIO_voidSetPinDirection+0x264>
    2410:	7f c0       	rjmp	.+254    	; 0x2510 <MDIO_voidSetPinDirection+0x362>
    2412:	a7 c0       	rjmp	.+334    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			{
			case MDIO_PORTA: CLEAR_BIT(GPIOA->DDR, ARG_u8Pin);SET_BIT(GPIOA->PORT, ARG_u8Pin);break;
    2414:	a9 e3       	ldi	r26, 0x39	; 57
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e9 e3       	ldi	r30, 0x39	; 57
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	81 81       	ldd	r24, Z+1	; 0x01
    241e:	48 2f       	mov	r20, r24
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <MDIO_voidSetPinDirection+0x282>
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	2a 95       	dec	r18
    2432:	e2 f7       	brpl	.-8      	; 0x242c <MDIO_voidSetPinDirection+0x27e>
    2434:	80 95       	com	r24
    2436:	84 23       	and	r24, r20
    2438:	11 96       	adiw	r26, 0x01	; 1
    243a:	8c 93       	st	X, r24
    243c:	a9 e3       	ldi	r26, 0x39	; 57
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e9 e3       	ldi	r30, 0x39	; 57
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	48 2f       	mov	r20, r24
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	02 2e       	mov	r0, r18
    2454:	02 c0       	rjmp	.+4      	; 0x245a <MDIO_voidSetPinDirection+0x2ac>
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	0a 94       	dec	r0
    245c:	e2 f7       	brpl	.-8      	; 0x2456 <MDIO_voidSetPinDirection+0x2a8>
    245e:	84 2b       	or	r24, r20
    2460:	12 96       	adiw	r26, 0x02	; 2
    2462:	8c 93       	st	X, r24
    2464:	12 97       	sbiw	r26, 0x02	; 2
    2466:	7d c0       	rjmp	.+250    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTB: CLEAR_BIT(GPIOB->DDR, ARG_u8Pin);SET_BIT(GPIOB->PORT, ARG_u8Pin);break;
    2468:	a6 e3       	ldi	r26, 0x36	; 54
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e6 e3       	ldi	r30, 0x36	; 54
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	81 81       	ldd	r24, Z+1	; 0x01
    2472:	48 2f       	mov	r20, r24
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <MDIO_voidSetPinDirection+0x2d6>
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	2a 95       	dec	r18
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <MDIO_voidSetPinDirection+0x2d2>
    2488:	80 95       	com	r24
    248a:	84 23       	and	r24, r20
    248c:	11 96       	adiw	r26, 0x01	; 1
    248e:	8c 93       	st	X, r24
    2490:	a6 e3       	ldi	r26, 0x36	; 54
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e6 e3       	ldi	r30, 0x36	; 54
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	82 81       	ldd	r24, Z+2	; 0x02
    249a:	48 2f       	mov	r20, r24
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 2e       	mov	r0, r18
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <MDIO_voidSetPinDirection+0x300>
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	0a 94       	dec	r0
    24b0:	e2 f7       	brpl	.-8      	; 0x24aa <MDIO_voidSetPinDirection+0x2fc>
    24b2:	84 2b       	or	r24, r20
    24b4:	12 96       	adiw	r26, 0x02	; 2
    24b6:	8c 93       	st	X, r24
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	53 c0       	rjmp	.+166    	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTC: CLEAR_BIT(GPIOC->DDR, ARG_u8Pin);SET_BIT(GPIOC->PORT, ARG_u8Pin);break;
    24bc:	a3 e3       	ldi	r26, 0x33	; 51
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e3 e3       	ldi	r30, 0x33	; 51
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	81 81       	ldd	r24, Z+1	; 0x01
    24c6:	48 2f       	mov	r20, r24
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <MDIO_voidSetPinDirection+0x32a>
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	2a 95       	dec	r18
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <MDIO_voidSetPinDirection+0x326>
    24dc:	80 95       	com	r24
    24de:	84 23       	and	r24, r20
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	8c 93       	st	X, r24
    24e4:	a3 e3       	ldi	r26, 0x33	; 51
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e3 e3       	ldi	r30, 0x33	; 51
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	48 2f       	mov	r20, r24
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 2e       	mov	r0, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <MDIO_voidSetPinDirection+0x354>
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	0a 94       	dec	r0
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <MDIO_voidSetPinDirection+0x350>
    2506:	84 2b       	or	r24, r20
    2508:	12 96       	adiw	r26, 0x02	; 2
    250a:	8c 93       	st	X, r24
    250c:	12 97       	sbiw	r26, 0x02	; 2
    250e:	29 c0       	rjmp	.+82     	; 0x2562 <MDIO_voidSetPinDirection+0x3b4>
			case MDIO_PORTD: CLEAR_BIT(GPIOD->DDR, ARG_u8Pin);SET_BIT(GPIOD->PORT, ARG_u8Pin);break;
    2510:	a0 e3       	ldi	r26, 0x30	; 48
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e0 e3       	ldi	r30, 0x30	; 48
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	81 81       	ldd	r24, Z+1	; 0x01
    251a:	48 2f       	mov	r20, r24
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	02 c0       	rjmp	.+4      	; 0x252c <MDIO_voidSetPinDirection+0x37e>
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	2a 95       	dec	r18
    252e:	e2 f7       	brpl	.-8      	; 0x2528 <MDIO_voidSetPinDirection+0x37a>
    2530:	80 95       	com	r24
    2532:	84 23       	and	r24, r20
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	8c 93       	st	X, r24
    2538:	a0 e3       	ldi	r26, 0x30	; 48
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e0 e3       	ldi	r30, 0x30	; 48
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	48 2f       	mov	r20, r24
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	02 2e       	mov	r0, r18
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <MDIO_voidSetPinDirection+0x3a8>
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	0a 94       	dec	r0
    2558:	e2 f7       	brpl	.-8      	; 0x2552 <MDIO_voidSetPinDirection+0x3a4>
    255a:	84 2b       	or	r24, r20
    255c:	12 96       	adiw	r26, 0x02	; 2
    255e:	8c 93       	st	X, r24
    2560:	12 97       	sbiw	r26, 0x02	; 2
	}
	else
	{
		/*Wrong case*/
	}
}
    2562:	29 96       	adiw	r28, 0x09	; 9
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 ARG_u8Port,u8 ARG_u8Pin,u8 ARG_u8Value)
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	27 97       	sbiw	r28, 0x07	; 7
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	6a 83       	std	Y+2, r22	; 0x02
    258c:	4b 83       	std	Y+3, r20	; 0x03
	if(ARG_u8Pin<=7)
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	88 30       	cpi	r24, 0x08	; 8
    2592:	08 f0       	brcs	.+2      	; 0x2596 <MDIO_voidSetPinValue+0x22>
    2594:	fb c0       	rjmp	.+502    	; 0x278c <MDIO_voidSetPinValue+0x218>
		{
			if(MDIO_HIGH==ARG_u8Value)
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	09 f0       	breq	.+2      	; 0x259e <MDIO_voidSetPinValue+0x2a>
    259c:	78 c0       	rjmp	.+240    	; 0x268e <MDIO_voidSetPinValue+0x11a>
			{
				switch(ARG_u8Port)
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	3f 83       	std	Y+7, r19	; 0x07
    25a6:	2e 83       	std	Y+6, r18	; 0x06
    25a8:	8e 81       	ldd	r24, Y+6	; 0x06
    25aa:	9f 81       	ldd	r25, Y+7	; 0x07
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	91 05       	cpc	r25, r1
    25b0:	61 f1       	breq	.+88     	; 0x260a <MDIO_voidSetPinValue+0x96>
    25b2:	2e 81       	ldd	r18, Y+6	; 0x06
    25b4:	3f 81       	ldd	r19, Y+7	; 0x07
    25b6:	22 30       	cpi	r18, 0x02	; 2
    25b8:	31 05       	cpc	r19, r1
    25ba:	2c f4       	brge	.+10     	; 0x25c6 <MDIO_voidSetPinValue+0x52>
    25bc:	8e 81       	ldd	r24, Y+6	; 0x06
    25be:	9f 81       	ldd	r25, Y+7	; 0x07
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	69 f0       	breq	.+26     	; 0x25de <MDIO_voidSetPinValue+0x6a>
    25c4:	e3 c0       	rjmp	.+454    	; 0x278c <MDIO_voidSetPinValue+0x218>
    25c6:	2e 81       	ldd	r18, Y+6	; 0x06
    25c8:	3f 81       	ldd	r19, Y+7	; 0x07
    25ca:	22 30       	cpi	r18, 0x02	; 2
    25cc:	31 05       	cpc	r19, r1
    25ce:	99 f1       	breq	.+102    	; 0x2636 <MDIO_voidSetPinValue+0xc2>
    25d0:	8e 81       	ldd	r24, Y+6	; 0x06
    25d2:	9f 81       	ldd	r25, Y+7	; 0x07
    25d4:	83 30       	cpi	r24, 0x03	; 3
    25d6:	91 05       	cpc	r25, r1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <MDIO_voidSetPinValue+0x68>
    25da:	43 c0       	rjmp	.+134    	; 0x2662 <MDIO_voidSetPinValue+0xee>
    25dc:	d7 c0       	rjmp	.+430    	; 0x278c <MDIO_voidSetPinValue+0x218>
				{
				case MDIO_PORTA: SET_BIT(GPIOA->PORT, ARG_u8Pin);break;
    25de:	a9 e3       	ldi	r26, 0x39	; 57
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e9 e3       	ldi	r30, 0x39	; 57
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	48 2f       	mov	r20, r24
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <MDIO_voidSetPinValue+0x88>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <MDIO_voidSetPinValue+0x84>
    2600:	84 2b       	or	r24, r20
    2602:	12 96       	adiw	r26, 0x02	; 2
    2604:	8c 93       	st	X, r24
    2606:	12 97       	sbiw	r26, 0x02	; 2
    2608:	c1 c0       	rjmp	.+386    	; 0x278c <MDIO_voidSetPinValue+0x218>
				case MDIO_PORTB: SET_BIT(GPIOB->PORT, ARG_u8Pin);break;
    260a:	a6 e3       	ldi	r26, 0x36	; 54
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e6 e3       	ldi	r30, 0x36	; 54
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	48 2f       	mov	r20, r24
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	02 2e       	mov	r0, r18
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <MDIO_voidSetPinValue+0xb4>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	0a 94       	dec	r0
    262a:	e2 f7       	brpl	.-8      	; 0x2624 <MDIO_voidSetPinValue+0xb0>
    262c:	84 2b       	or	r24, r20
    262e:	12 96       	adiw	r26, 0x02	; 2
    2630:	8c 93       	st	X, r24
    2632:	12 97       	sbiw	r26, 0x02	; 2
    2634:	ab c0       	rjmp	.+342    	; 0x278c <MDIO_voidSetPinValue+0x218>
				case MDIO_PORTC: SET_BIT(GPIOC->PORT, ARG_u8Pin);break;
    2636:	a3 e3       	ldi	r26, 0x33	; 51
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e3 e3       	ldi	r30, 0x33	; 51
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	48 2f       	mov	r20, r24
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	02 2e       	mov	r0, r18
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <MDIO_voidSetPinValue+0xe0>
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	0a 94       	dec	r0
    2656:	e2 f7       	brpl	.-8      	; 0x2650 <MDIO_voidSetPinValue+0xdc>
    2658:	84 2b       	or	r24, r20
    265a:	12 96       	adiw	r26, 0x02	; 2
    265c:	8c 93       	st	X, r24
    265e:	12 97       	sbiw	r26, 0x02	; 2
    2660:	95 c0       	rjmp	.+298    	; 0x278c <MDIO_voidSetPinValue+0x218>
				case MDIO_PORTD: SET_BIT(GPIOD->PORT, ARG_u8Pin);break;
    2662:	a0 e3       	ldi	r26, 0x30	; 48
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e0 e3       	ldi	r30, 0x30	; 48
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	48 2f       	mov	r20, r24
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	02 2e       	mov	r0, r18
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <MDIO_voidSetPinValue+0x10c>
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	0a 94       	dec	r0
    2682:	e2 f7       	brpl	.-8      	; 0x267c <MDIO_voidSetPinValue+0x108>
    2684:	84 2b       	or	r24, r20
    2686:	12 96       	adiw	r26, 0x02	; 2
    2688:	8c 93       	st	X, r24
    268a:	12 97       	sbiw	r26, 0x02	; 2
    268c:	7f c0       	rjmp	.+254    	; 0x278c <MDIO_voidSetPinValue+0x218>
				default : /* Wrong case*/ break;
				}
			}
			else if(MDIO_LOW==ARG_u8Value)
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	88 23       	and	r24, r24
    2692:	09 f0       	breq	.+2      	; 0x2696 <MDIO_voidSetPinValue+0x122>
    2694:	7b c0       	rjmp	.+246    	; 0x278c <MDIO_voidSetPinValue+0x218>
			{
				switch(ARG_u8Port)
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	3d 83       	std	Y+5, r19	; 0x05
    269e:	2c 83       	std	Y+4, r18	; 0x04
    26a0:	8c 81       	ldd	r24, Y+4	; 0x04
    26a2:	9d 81       	ldd	r25, Y+5	; 0x05
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	91 05       	cpc	r25, r1
    26a8:	69 f1       	breq	.+90     	; 0x2704 <MDIO_voidSetPinValue+0x190>
    26aa:	2c 81       	ldd	r18, Y+4	; 0x04
    26ac:	3d 81       	ldd	r19, Y+5	; 0x05
    26ae:	22 30       	cpi	r18, 0x02	; 2
    26b0:	31 05       	cpc	r19, r1
    26b2:	2c f4       	brge	.+10     	; 0x26be <MDIO_voidSetPinValue+0x14a>
    26b4:	8c 81       	ldd	r24, Y+4	; 0x04
    26b6:	9d 81       	ldd	r25, Y+5	; 0x05
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	69 f0       	breq	.+26     	; 0x26d6 <MDIO_voidSetPinValue+0x162>
    26bc:	67 c0       	rjmp	.+206    	; 0x278c <MDIO_voidSetPinValue+0x218>
    26be:	2c 81       	ldd	r18, Y+4	; 0x04
    26c0:	3d 81       	ldd	r19, Y+5	; 0x05
    26c2:	22 30       	cpi	r18, 0x02	; 2
    26c4:	31 05       	cpc	r19, r1
    26c6:	a9 f1       	breq	.+106    	; 0x2732 <MDIO_voidSetPinValue+0x1be>
    26c8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ca:	9d 81       	ldd	r25, Y+5	; 0x05
    26cc:	83 30       	cpi	r24, 0x03	; 3
    26ce:	91 05       	cpc	r25, r1
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <MDIO_voidSetPinValue+0x160>
    26d2:	46 c0       	rjmp	.+140    	; 0x2760 <MDIO_voidSetPinValue+0x1ec>
    26d4:	5b c0       	rjmp	.+182    	; 0x278c <MDIO_voidSetPinValue+0x218>
				{
				case MDIO_PORTA: CLEAR_BIT(GPIOA->PORT, ARG_u8Pin);break;
    26d6:	a9 e3       	ldi	r26, 0x39	; 57
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e9 e3       	ldi	r30, 0x39	; 57
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	48 2f       	mov	r20, r24
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 2e       	mov	r0, r18
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <MDIO_voidSetPinValue+0x180>
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	0a 94       	dec	r0
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <MDIO_voidSetPinValue+0x17c>
    26f8:	80 95       	com	r24
    26fa:	84 23       	and	r24, r20
    26fc:	12 96       	adiw	r26, 0x02	; 2
    26fe:	8c 93       	st	X, r24
    2700:	12 97       	sbiw	r26, 0x02	; 2
    2702:	44 c0       	rjmp	.+136    	; 0x278c <MDIO_voidSetPinValue+0x218>
				case MDIO_PORTB: CLEAR_BIT(GPIOB->PORT, ARG_u8Pin);break;
    2704:	a6 e3       	ldi	r26, 0x36	; 54
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e6 e3       	ldi	r30, 0x36	; 54
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	48 2f       	mov	r20, r24
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	02 2e       	mov	r0, r18
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <MDIO_voidSetPinValue+0x1ae>
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	0a 94       	dec	r0
    2724:	e2 f7       	brpl	.-8      	; 0x271e <MDIO_voidSetPinValue+0x1aa>
    2726:	80 95       	com	r24
    2728:	84 23       	and	r24, r20
    272a:	12 96       	adiw	r26, 0x02	; 2
    272c:	8c 93       	st	X, r24
    272e:	12 97       	sbiw	r26, 0x02	; 2
    2730:	2d c0       	rjmp	.+90     	; 0x278c <MDIO_voidSetPinValue+0x218>
				case MDIO_PORTC: CLEAR_BIT(GPIOC->PORT, ARG_u8Pin);break;
    2732:	a3 e3       	ldi	r26, 0x33	; 51
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e3 e3       	ldi	r30, 0x33	; 51
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	48 2f       	mov	r20, r24
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	02 2e       	mov	r0, r18
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <MDIO_voidSetPinValue+0x1dc>
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	0a 94       	dec	r0
    2752:	e2 f7       	brpl	.-8      	; 0x274c <MDIO_voidSetPinValue+0x1d8>
    2754:	80 95       	com	r24
    2756:	84 23       	and	r24, r20
    2758:	12 96       	adiw	r26, 0x02	; 2
    275a:	8c 93       	st	X, r24
    275c:	12 97       	sbiw	r26, 0x02	; 2
    275e:	16 c0       	rjmp	.+44     	; 0x278c <MDIO_voidSetPinValue+0x218>
				case MDIO_PORTD: CLEAR_BIT(GPIOD->PORT, ARG_u8Pin);break;
    2760:	a0 e3       	ldi	r26, 0x30	; 48
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e0 e3       	ldi	r30, 0x30	; 48
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	48 2f       	mov	r20, r24
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	02 2e       	mov	r0, r18
    2778:	02 c0       	rjmp	.+4      	; 0x277e <MDIO_voidSetPinValue+0x20a>
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	0a 94       	dec	r0
    2780:	e2 f7       	brpl	.-8      	; 0x277a <MDIO_voidSetPinValue+0x206>
    2782:	80 95       	com	r24
    2784:	84 23       	and	r24, r20
    2786:	12 96       	adiw	r26, 0x02	; 2
    2788:	8c 93       	st	X, r24
    278a:	12 97       	sbiw	r26, 0x02	; 2
		}
		else
		{
			/*Wrong case*/
		}
}
    278c:	27 96       	adiw	r28, 0x07	; 7
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 ARG_u8Port,u8 ARG_u8Pin)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <MDIO_u8GetPinValue+0x6>
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <MDIO_u8GetPinValue+0x8>
    27a6:	0f 92       	push	r0
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	8a 83       	std	Y+2, r24	; 0x02
    27ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8Value;
	if(ARG_u8Pin<=7)
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	88 30       	cpi	r24, 0x08	; 8
    27b4:	08 f0       	brcs	.+2      	; 0x27b8 <MDIO_u8GetPinValue+0x1a>
    27b6:	67 c0       	rjmp	.+206    	; 0x2886 <MDIO_u8GetPinValue+0xe8>
	{
		switch(ARG_u8Port)
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	3d 83       	std	Y+5, r19	; 0x05
    27c0:	2c 83       	std	Y+4, r18	; 0x04
    27c2:	4c 81       	ldd	r20, Y+4	; 0x04
    27c4:	5d 81       	ldd	r21, Y+5	; 0x05
    27c6:	41 30       	cpi	r20, 0x01	; 1
    27c8:	51 05       	cpc	r21, r1
    27ca:	41 f1       	breq	.+80     	; 0x281c <MDIO_u8GetPinValue+0x7e>
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	9d 81       	ldd	r25, Y+5	; 0x05
    27d0:	82 30       	cpi	r24, 0x02	; 2
    27d2:	91 05       	cpc	r25, r1
    27d4:	34 f4       	brge	.+12     	; 0x27e2 <MDIO_u8GetPinValue+0x44>
    27d6:	2c 81       	ldd	r18, Y+4	; 0x04
    27d8:	3d 81       	ldd	r19, Y+5	; 0x05
    27da:	21 15       	cp	r18, r1
    27dc:	31 05       	cpc	r19, r1
    27de:	61 f0       	breq	.+24     	; 0x27f8 <MDIO_u8GetPinValue+0x5a>
    27e0:	52 c0       	rjmp	.+164    	; 0x2886 <MDIO_u8GetPinValue+0xe8>
    27e2:	4c 81       	ldd	r20, Y+4	; 0x04
    27e4:	5d 81       	ldd	r21, Y+5	; 0x05
    27e6:	42 30       	cpi	r20, 0x02	; 2
    27e8:	51 05       	cpc	r21, r1
    27ea:	51 f1       	breq	.+84     	; 0x2840 <MDIO_u8GetPinValue+0xa2>
    27ec:	8c 81       	ldd	r24, Y+4	; 0x04
    27ee:	9d 81       	ldd	r25, Y+5	; 0x05
    27f0:	83 30       	cpi	r24, 0x03	; 3
    27f2:	91 05       	cpc	r25, r1
    27f4:	b9 f1       	breq	.+110    	; 0x2864 <MDIO_u8GetPinValue+0xc6>
    27f6:	47 c0       	rjmp	.+142    	; 0x2886 <MDIO_u8GetPinValue+0xe8>
		{
		case MDIO_PORTA:L_u8Value= GET_BIT(GPIOA->PIN, ARG_u8Pin);break;
    27f8:	e9 e3       	ldi	r30, 0x39	; 57
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a9 01       	movw	r20, r18
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <MDIO_u8GetPinValue+0x72>
    280c:	55 95       	asr	r21
    280e:	47 95       	ror	r20
    2810:	8a 95       	dec	r24
    2812:	e2 f7       	brpl	.-8      	; 0x280c <MDIO_u8GetPinValue+0x6e>
    2814:	ca 01       	movw	r24, r20
    2816:	81 70       	andi	r24, 0x01	; 1
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	35 c0       	rjmp	.+106    	; 0x2886 <MDIO_u8GetPinValue+0xe8>
		case MDIO_PORTB:L_u8Value= GET_BIT(GPIOB->PIN, ARG_u8Pin);break;
    281c:	e6 e3       	ldi	r30, 0x36	; 54
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a9 01       	movw	r20, r18
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <MDIO_u8GetPinValue+0x96>
    2830:	55 95       	asr	r21
    2832:	47 95       	ror	r20
    2834:	8a 95       	dec	r24
    2836:	e2 f7       	brpl	.-8      	; 0x2830 <MDIO_u8GetPinValue+0x92>
    2838:	ca 01       	movw	r24, r20
    283a:	81 70       	andi	r24, 0x01	; 1
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	23 c0       	rjmp	.+70     	; 0x2886 <MDIO_u8GetPinValue+0xe8>
		case MDIO_PORTC:L_u8Value= GET_BIT(GPIOC->PIN, ARG_u8Pin);break;
    2840:	e3 e3       	ldi	r30, 0x33	; 51
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	88 2f       	mov	r24, r24
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a9 01       	movw	r20, r18
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <MDIO_u8GetPinValue+0xba>
    2854:	55 95       	asr	r21
    2856:	47 95       	ror	r20
    2858:	8a 95       	dec	r24
    285a:	e2 f7       	brpl	.-8      	; 0x2854 <MDIO_u8GetPinValue+0xb6>
    285c:	ca 01       	movw	r24, r20
    285e:	81 70       	andi	r24, 0x01	; 1
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	11 c0       	rjmp	.+34     	; 0x2886 <MDIO_u8GetPinValue+0xe8>
		case MDIO_PORTD:L_u8Value= GET_BIT(GPIOD->PIN, ARG_u8Pin);break;
    2864:	e0 e3       	ldi	r30, 0x30	; 48
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a9 01       	movw	r20, r18
    2876:	02 c0       	rjmp	.+4      	; 0x287c <MDIO_u8GetPinValue+0xde>
    2878:	55 95       	asr	r21
    287a:	47 95       	ror	r20
    287c:	8a 95       	dec	r24
    287e:	e2 f7       	brpl	.-8      	; 0x2878 <MDIO_u8GetPinValue+0xda>
    2880:	ca 01       	movw	r24, r20
    2882:	81 70       	andi	r24, 0x01	; 1
    2884:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Wrong case*/
	}
	return L_u8Value;
    2886:	89 81       	ldd	r24, Y+1	; 0x01
}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <MPU6050_Init>:
#define MPU6050_ACC_START     0x3B

#define ACCEL_SENSITIVITY    16384.0
#define GRAVITY               9.8

void MPU6050_Init(void) {
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	2e 97       	sbiw	r28, 0x0e	; 14
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    I2c_Init();
    28ac:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <I2c_Init>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a8 ec       	ldi	r26, 0xC8	; 200
    28b6:	b2 e4       	ldi	r27, 0x42	; 66
    28b8:	8b 87       	std	Y+11, r24	; 0x0b
    28ba:	9c 87       	std	Y+12, r25	; 0x0c
    28bc:	ad 87       	std	Y+13, r26	; 0x0d
    28be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a ef       	ldi	r20, 0xFA	; 250
    28ce:	54 e4       	ldi	r21, 0x44	; 68
    28d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	8f 83       	std	Y+7, r24	; 0x07
    28da:	98 87       	std	Y+8, r25	; 0x08
    28dc:	a9 87       	std	Y+9, r26	; 0x09
    28de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28e0:	6f 81       	ldd	r22, Y+7	; 0x07
    28e2:	78 85       	ldd	r23, Y+8	; 0x08
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e8       	ldi	r20, 0x80	; 128
    28ee:	5f e3       	ldi	r21, 0x3F	; 63
    28f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28f4:	88 23       	and	r24, r24
    28f6:	2c f4       	brge	.+10     	; 0x2902 <MPU6050_Init+0x6a>
		__ticks = 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	3f c0       	rjmp	.+126    	; 0x2980 <MPU6050_Init+0xe8>
	else if (__tmp > 65535)
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	3f ef       	ldi	r19, 0xFF	; 255
    290e:	4f e7       	ldi	r20, 0x7F	; 127
    2910:	57 e4       	ldi	r21, 0x47	; 71
    2912:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2916:	18 16       	cp	r1, r24
    2918:	4c f5       	brge	.+82     	; 0x296c <MPU6050_Init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	bc 01       	movw	r22, r24
    2934:	cd 01       	movw	r24, r26
    2936:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	0f c0       	rjmp	.+30     	; 0x2962 <MPU6050_Init+0xca>
    2944:	88 ec       	ldi	r24, 0xC8	; 200
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9c 83       	std	Y+4, r25	; 0x04
    294a:	8b 83       	std	Y+3, r24	; 0x03
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <MPU6050_Init+0xb8>
    2954:	9c 83       	std	Y+4, r25	; 0x04
    2956:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	9e 83       	std	Y+6, r25	; 0x06
    2960:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	8d 81       	ldd	r24, Y+5	; 0x05
    2964:	9e 81       	ldd	r25, Y+6	; 0x06
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	69 f7       	brne	.-38     	; 0x2944 <MPU6050_Init+0xac>
    296a:	14 c0       	rjmp	.+40     	; 0x2994 <MPU6050_Init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <MPU6050_Init+0xf4>
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);

    I2c_SendStart();
    2994:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <I2c_SendStart>
    I2c_SendSlaveAddress(MPU6050_ADDRESS, I2C_REQ_WRITE);
    2998:	88 e6       	ldi	r24, 0x68	; 104
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <I2c_SendSlaveAddress>
    I2c_WriteData(MPU6050_PWR_MGMT);
    29a0:	8b e6       	ldi	r24, 0x6B	; 107
    29a2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <I2c_WriteData>
    I2c_WriteData(0x00);
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <I2c_WriteData>
    I2c_SendStop();
    29ac:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <I2c_SendStop>

    I2c_SendStart();
    29b0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <I2c_SendStart>
    I2c_SendSlaveAddress(MPU6050_ADDRESS, I2C_REQ_WRITE);
    29b4:	88 e6       	ldi	r24, 0x68	; 104
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <I2c_SendSlaveAddress>
    I2c_WriteData(MPU6050_ACCEL_CONFIG);
    29bc:	8c e1       	ldi	r24, 0x1C	; 28
    29be:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <I2c_WriteData>
    I2c_WriteData(0x00);
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <I2c_WriteData>
    I2c_SendStop();
    29c8:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <I2c_SendStop>
}
    29cc:	2e 96       	adiw	r28, 0x0e	; 14
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <MPU6050_ReadAccel>:

void MPU6050_ReadAccel(float* ax, float* ay, float* az) {
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	63 97       	sbiw	r28, 0x13	; 19
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	9f 87       	std	Y+15, r25	; 0x0f
    29f4:	8e 87       	std	Y+14, r24	; 0x0e
    29f6:	79 8b       	std	Y+17, r23	; 0x11
    29f8:	68 8b       	std	Y+16, r22	; 0x10
    29fa:	5b 8b       	std	Y+19, r21	; 0x13
    29fc:	4a 8b       	std	Y+18, r20	; 0x12
    u8 data[6];
    u16 raw_ax, raw_ay, raw_az;

    I2c_SendStart();
    29fe:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <I2c_SendStart>
    I2c_SendSlaveAddress(MPU6050_ADDRESS, I2C_REQ_WRITE);
    2a02:	88 e6       	ldi	r24, 0x68	; 104
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <I2c_SendSlaveAddress>
    I2c_WriteData(MPU6050_ACC_START);
    2a0a:	8b e3       	ldi	r24, 0x3B	; 59
    2a0c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <I2c_WriteData>
    I2c_SendStop();
    2a10:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <I2c_SendStop>

    I2c_SendStart();
    2a14:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <I2c_SendStart>
    I2c_SendSlaveAddress(MPU6050_ADDRESS, I2C_REQ_READ);
    2a18:	88 e6       	ldi	r24, 0x68	; 104
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <I2c_SendSlaveAddress>
    for (u8 i = 0; i < 6; i++) {
    2a20:	19 82       	std	Y+1, r1	; 0x01
    2a22:	0c c0       	rjmp	.+24     	; 0x2a3c <MPU6050_ReadAccel+0x5e>
        I2c_ReadData(&data[i]);
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	08 96       	adiw	r24, 0x08	; 8
    2a2e:	82 0f       	add	r24, r18
    2a30:	93 1f       	adc	r25, r19
    2a32:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <I2c_ReadData>
    I2c_WriteData(MPU6050_ACC_START);
    I2c_SendStop();

    I2c_SendStart();
    I2c_SendSlaveAddress(MPU6050_ADDRESS, I2C_REQ_READ);
    for (u8 i = 0; i < 6; i++) {
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	8f 5f       	subi	r24, 0xFF	; 255
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	86 30       	cpi	r24, 0x06	; 6
    2a40:	88 f3       	brcs	.-30     	; 0x2a24 <MPU6050_ReadAccel+0x46>
        I2c_ReadData(&data[i]);
    }
    I2c_SendStop();
    2a42:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <I2c_SendStop>

    raw_ax = (s16)((data[0] << 8) | data[1]);
    2a46:	88 85       	ldd	r24, Y+8	; 0x08
    2a48:	88 2f       	mov	r24, r24
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	38 2f       	mov	r19, r24
    2a4e:	22 27       	eor	r18, r18
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	82 2b       	or	r24, r18
    2a58:	93 2b       	or	r25, r19
    2a5a:	9f 83       	std	Y+7, r25	; 0x07
    2a5c:	8e 83       	std	Y+6, r24	; 0x06
    raw_ay = (s16)((data[2] << 8) | data[3]);
    2a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	38 2f       	mov	r19, r24
    2a66:	22 27       	eor	r18, r18
    2a68:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	82 2b       	or	r24, r18
    2a70:	93 2b       	or	r25, r19
    2a72:	9d 83       	std	Y+5, r25	; 0x05
    2a74:	8c 83       	std	Y+4, r24	; 0x04
    raw_az = (s16)((data[4] << 8) | data[5]);
    2a76:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	38 2f       	mov	r19, r24
    2a7e:	22 27       	eor	r18, r18
    2a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	82 2b       	or	r24, r18
    2a88:	93 2b       	or	r25, r19
    2a8a:	9b 83       	std	Y+3, r25	; 0x03
    2a8c:	8a 83       	std	Y+2, r24	; 0x02

    *ax = (raw_ax / ACCEL_SENSITIVITY) * GRAVITY;
    2a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a90:	9f 81       	ldd	r25, Y+7	; 0x07
    2a92:	cc 01       	movw	r24, r24
    2a94:	a0 e0       	ldi	r26, 0x00	; 0
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	56 e4       	ldi	r21, 0x46	; 70
    2ab0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	2d ec       	ldi	r18, 0xCD	; 205
    2abe:	3c ec       	ldi	r19, 0xCC	; 204
    2ac0:	4c e1       	ldi	r20, 0x1C	; 28
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	ee 85       	ldd	r30, Y+14	; 0x0e
    2ace:	ff 85       	ldd	r31, Y+15	; 0x0f
    2ad0:	80 83       	st	Z, r24
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	a2 83       	std	Z+2, r26	; 0x02
    2ad6:	b3 83       	std	Z+3, r27	; 0x03
    *ay = (raw_ay / ACCEL_SENSITIVITY) * GRAVITY;
    2ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ada:	9d 81       	ldd	r25, Y+5	; 0x05
    2adc:	cc 01       	movw	r24, r24
    2ade:	a0 e0       	ldi	r26, 0x00	; 0
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	56 e4       	ldi	r21, 0x46	; 70
    2afa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	bc 01       	movw	r22, r24
    2b04:	cd 01       	movw	r24, r26
    2b06:	2d ec       	ldi	r18, 0xCD	; 205
    2b08:	3c ec       	ldi	r19, 0xCC	; 204
    2b0a:	4c e1       	ldi	r20, 0x1C	; 28
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	e8 89       	ldd	r30, Y+16	; 0x10
    2b18:	f9 89       	ldd	r31, Y+17	; 0x11
    2b1a:	80 83       	st	Z, r24
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	a2 83       	std	Z+2, r26	; 0x02
    2b20:	b3 83       	std	Z+3, r27	; 0x03
    *az = (raw_az / ACCEL_SENSITIVITY) *GRAVITY;
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	9b 81       	ldd	r25, Y+3	; 0x03
    2b26:	cc 01       	movw	r24, r24
    2b28:	a0 e0       	ldi	r26, 0x00	; 0
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e8       	ldi	r20, 0x80	; 128
    2b42:	56 e4       	ldi	r21, 0x46	; 70
    2b44:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	2d ec       	ldi	r18, 0xCD	; 205
    2b52:	3c ec       	ldi	r19, 0xCC	; 204
    2b54:	4c e1       	ldi	r20, 0x1C	; 28
    2b56:	51 e4       	ldi	r21, 0x41	; 65
    2b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	ea 89       	ldd	r30, Y+18	; 0x12
    2b62:	fb 89       	ldd	r31, Y+19	; 0x13
    2b64:	80 83       	st	Z, r24
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	a2 83       	std	Z+2, r26	; 0x02
    2b6a:	b3 83       	std	Z+3, r27	; 0x03
}
    2b6c:	63 96       	adiw	r28, 0x13	; 19
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <main>:

int main(void) {
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	a8 97       	sbiw	r28, 0x28	; 40
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    float ax, ay, az;
    MPU6050_Init();
    2b92:	0e 94 4c 14 	call	0x2898	; 0x2898 <MPU6050_Init>
    HLCD_voidInit();
    2b96:	0e 94 0f 07 	call	0xe1e	; 0xe1e <HLCD_voidInit>
    MDIO_voidSetPinDirection(MDIO_PORTB, 5, MDIO_OUTPUT);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	65 e0       	ldi	r22, 0x05	; 5
    2b9e:	4b e0       	ldi	r20, 0x0B	; 11
    2ba0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <MDIO_voidSetPinDirection>

    while (1) {
        MPU6050_ReadAccel(&ax, &ay, &az);
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	4d 96       	adiw	r24, 0x1d	; 29
    2ba8:	9e 01       	movw	r18, r28
    2baa:	2f 5d       	subi	r18, 0xDF	; 223
    2bac:	3f 4f       	sbci	r19, 0xFF	; 255
    2bae:	ae 01       	movw	r20, r28
    2bb0:	4b 5d       	subi	r20, 0xDB	; 219
    2bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb4:	b9 01       	movw	r22, r18
    2bb6:	0e 94 ef 14 	call	0x29de	; 0x29de <MPU6050_ReadAccel>
        HLCD_voidSetCursor(0,0);
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <HLCD_voidSetCursor>
              HLCD_voidWriteString("az= ");
    2bc2:	80 e6       	ldi	r24, 0x60	; 96
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <HLCD_voidWriteString>
              HLCD_voidintgerToString(az);
    2bca:	8d a1       	ldd	r24, Y+37	; 0x25
    2bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2bce:	af a1       	ldd	r26, Y+39	; 0x27
    2bd0:	b8 a5       	ldd	r27, Y+40	; 0x28
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <HLCD_voidintgerToString>

              HLCD_voidSetCursor(1,0);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <HLCD_voidSetCursor>
              HLCD_voidWriteString("ay= ");
    2bea:	85 e6       	ldi	r24, 0x65	; 101
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <HLCD_voidWriteString>
              HLCD_voidintgerToString(ay);
    2bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf6:	ab a1       	ldd	r26, Y+35	; 0x23
    2bf8:	bc a1       	ldd	r27, Y+36	; 0x24
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <HLCD_voidintgerToString>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	aa e7       	ldi	r26, 0x7A	; 122
    2c10:	b4 e4       	ldi	r27, 0x44	; 68
    2c12:	89 8f       	std	Y+25, r24	; 0x19
    2c14:	9a 8f       	std	Y+26, r25	; 0x1a
    2c16:	ab 8f       	std	Y+27, r26	; 0x1b
    2c18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	4a ef       	ldi	r20, 0xFA	; 250
    2c28:	54 e4       	ldi	r21, 0x44	; 68
    2c2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	8d 8b       	std	Y+21, r24	; 0x15
    2c34:	9e 8b       	std	Y+22, r25	; 0x16
    2c36:	af 8b       	std	Y+23, r26	; 0x17
    2c38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c40:	98 8d       	ldd	r25, Y+24	; 0x18
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e8       	ldi	r20, 0x80	; 128
    2c48:	5f e3       	ldi	r21, 0x3F	; 63
    2c4a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c4e:	88 23       	and	r24, r24
    2c50:	2c f4       	brge	.+10     	; 0x2c5c <main+0xde>
		__ticks = 1;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	9c 8b       	std	Y+20, r25	; 0x14
    2c58:	8b 8b       	std	Y+19, r24	; 0x13
    2c5a:	3f c0       	rjmp	.+126    	; 0x2cda <main+0x15c>
	else if (__tmp > 65535)
    2c5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c60:	8f 89       	ldd	r24, Y+23	; 0x17
    2c62:	98 8d       	ldd	r25, Y+24	; 0x18
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	3f ef       	ldi	r19, 0xFF	; 255
    2c68:	4f e7       	ldi	r20, 0x7F	; 127
    2c6a:	57 e4       	ldi	r21, 0x47	; 71
    2c6c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c70:	18 16       	cp	r1, r24
    2c72:	4c f5       	brge	.+82     	; 0x2cc6 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c74:	69 8d       	ldd	r22, Y+25	; 0x19
    2c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e2       	ldi	r20, 0x20	; 32
    2c82:	51 e4       	ldi	r21, 0x41	; 65
    2c84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9c 8b       	std	Y+20, r25	; 0x14
    2c9a:	8b 8b       	std	Y+19, r24	; 0x13
    2c9c:	0f c0       	rjmp	.+30     	; 0x2cbc <main+0x13e>
    2c9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	9a 8b       	std	Y+18, r25	; 0x12
    2ca4:	89 8b       	std	Y+17, r24	; 0x11
    2ca6:	89 89       	ldd	r24, Y+17	; 0x11
    2ca8:	9a 89       	ldd	r25, Y+18	; 0x12
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <main+0x12c>
    2cae:	9a 8b       	std	Y+18, r25	; 0x12
    2cb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	9c 8b       	std	Y+20, r25	; 0x14
    2cba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	69 f7       	brne	.-38     	; 0x2c9e <main+0x120>
    2cc4:	14 c0       	rjmp	.+40     	; 0x2cee <main+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9c 8b       	std	Y+20, r25	; 0x14
    2cd8:	8b 8b       	std	Y+19, r24	; 0x13
    2cda:	8b 89       	ldd	r24, Y+19	; 0x13
    2cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cde:	98 8b       	std	Y+16, r25	; 0x10
    2ce0:	8f 87       	std	Y+15, r24	; 0x0f
    2ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce4:	98 89       	ldd	r25, Y+16	; 0x10
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <main+0x168>
    2cea:	98 8b       	std	Y+16, r25	; 0x10
    2cec:	8f 87       	std	Y+15, r24	; 0x0f
              _delay_ms(1000);
              HLCD_voidClearScreen();
    2cee:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <HLCD_voidClearScreen>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	aa ef       	ldi	r26, 0xFA	; 250
    2cf8:	b3 e4       	ldi	r27, 0x43	; 67
    2cfa:	8b 87       	std	Y+11, r24	; 0x0b
    2cfc:	9c 87       	std	Y+12, r25	; 0x0c
    2cfe:	ad 87       	std	Y+13, r26	; 0x0d
    2d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	4a ef       	ldi	r20, 0xFA	; 250
    2d10:	54 e4       	ldi	r21, 0x44	; 68
    2d12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	8f 83       	std	Y+7, r24	; 0x07
    2d1c:	98 87       	std	Y+8, r25	; 0x08
    2d1e:	a9 87       	std	Y+9, r26	; 0x09
    2d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d22:	6f 81       	ldd	r22, Y+7	; 0x07
    2d24:	78 85       	ldd	r23, Y+8	; 0x08
    2d26:	89 85       	ldd	r24, Y+9	; 0x09
    2d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e8       	ldi	r20, 0x80	; 128
    2d30:	5f e3       	ldi	r21, 0x3F	; 63
    2d32:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d36:	88 23       	and	r24, r24
    2d38:	2c f4       	brge	.+10     	; 0x2d44 <main+0x1c6>
		__ticks = 1;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	9e 83       	std	Y+6, r25	; 0x06
    2d40:	8d 83       	std	Y+5, r24	; 0x05
    2d42:	3f c0       	rjmp	.+126    	; 0x2dc2 <main+0x244>
	else if (__tmp > 65535)
    2d44:	6f 81       	ldd	r22, Y+7	; 0x07
    2d46:	78 85       	ldd	r23, Y+8	; 0x08
    2d48:	89 85       	ldd	r24, Y+9	; 0x09
    2d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	3f ef       	ldi	r19, 0xFF	; 255
    2d50:	4f e7       	ldi	r20, 0x7F	; 127
    2d52:	57 e4       	ldi	r21, 0x47	; 71
    2d54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	4c f5       	brge	.+82     	; 0x2dae <main+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e2       	ldi	r20, 0x20	; 32
    2d6a:	51 e4       	ldi	r21, 0x41	; 65
    2d6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
    2d84:	0f c0       	rjmp	.+30     	; 0x2da4 <main+0x226>
    2d86:	88 ec       	ldi	r24, 0xC8	; 200
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9c 83       	std	Y+4, r25	; 0x04
    2d8c:	8b 83       	std	Y+3, r24	; 0x03
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	9c 81       	ldd	r25, Y+4	; 0x04
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <main+0x214>
    2d96:	9c 83       	std	Y+4, r25	; 0x04
    2d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	69 f7       	brne	.-38     	; 0x2d86 <main+0x208>
    2dac:	fb ce       	rjmp	.-522    	; 0x2ba4 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dae:	6f 81       	ldd	r22, Y+7	; 0x07
    2db0:	78 85       	ldd	r23, Y+8	; 0x08
    2db2:	89 85       	ldd	r24, Y+9	; 0x09
    2db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9e 83       	std	Y+6, r25	; 0x06
    2dc0:	8d 83       	std	Y+5, r24	; 0x05
    2dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc6:	9a 83       	std	Y+2, r25	; 0x02
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <main+0x250>
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	e6 ce       	rjmp	.-564    	; 0x2ba4 <main+0x26>

00002dd8 <__prologue_saves__>:
    2dd8:	2f 92       	push	r2
    2dda:	3f 92       	push	r3
    2ddc:	4f 92       	push	r4
    2dde:	5f 92       	push	r5
    2de0:	6f 92       	push	r6
    2de2:	7f 92       	push	r7
    2de4:	8f 92       	push	r8
    2de6:	9f 92       	push	r9
    2de8:	af 92       	push	r10
    2dea:	bf 92       	push	r11
    2dec:	cf 92       	push	r12
    2dee:	df 92       	push	r13
    2df0:	ef 92       	push	r14
    2df2:	ff 92       	push	r15
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	ca 1b       	sub	r28, r26
    2e02:	db 0b       	sbc	r29, r27
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	09 94       	ijmp

00002e10 <__epilogue_restores__>:
    2e10:	2a 88       	ldd	r2, Y+18	; 0x12
    2e12:	39 88       	ldd	r3, Y+17	; 0x11
    2e14:	48 88       	ldd	r4, Y+16	; 0x10
    2e16:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e18:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e20:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e22:	b9 84       	ldd	r11, Y+9	; 0x09
    2e24:	c8 84       	ldd	r12, Y+8	; 0x08
    2e26:	df 80       	ldd	r13, Y+7	; 0x07
    2e28:	ee 80       	ldd	r14, Y+6	; 0x06
    2e2a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e2c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e2e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e30:	aa 81       	ldd	r26, Y+2	; 0x02
    2e32:	b9 81       	ldd	r27, Y+1	; 0x01
    2e34:	ce 0f       	add	r28, r30
    2e36:	d1 1d       	adc	r29, r1
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	ed 01       	movw	r28, r26
    2e44:	08 95       	ret

00002e46 <itoa>:
    2e46:	fb 01       	movw	r30, r22
    2e48:	9f 01       	movw	r18, r30
    2e4a:	e8 94       	clt
    2e4c:	42 30       	cpi	r20, 0x02	; 2
    2e4e:	c4 f0       	brlt	.+48     	; 0x2e80 <itoa+0x3a>
    2e50:	45 32       	cpi	r20, 0x25	; 37
    2e52:	b4 f4       	brge	.+44     	; 0x2e80 <itoa+0x3a>
    2e54:	4a 30       	cpi	r20, 0x0A	; 10
    2e56:	29 f4       	brne	.+10     	; 0x2e62 <itoa+0x1c>
    2e58:	97 fb       	bst	r25, 7
    2e5a:	1e f4       	brtc	.+6      	; 0x2e62 <itoa+0x1c>
    2e5c:	90 95       	com	r25
    2e5e:	81 95       	neg	r24
    2e60:	9f 4f       	sbci	r25, 0xFF	; 255
    2e62:	64 2f       	mov	r22, r20
    2e64:	77 27       	eor	r23, r23
    2e66:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__udivmodhi4>
    2e6a:	80 5d       	subi	r24, 0xD0	; 208
    2e6c:	8a 33       	cpi	r24, 0x3A	; 58
    2e6e:	0c f0       	brlt	.+2      	; 0x2e72 <itoa+0x2c>
    2e70:	89 5d       	subi	r24, 0xD9	; 217
    2e72:	81 93       	st	Z+, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	00 97       	sbiw	r24, 0x00	; 0
    2e78:	a1 f7       	brne	.-24     	; 0x2e62 <itoa+0x1c>
    2e7a:	16 f4       	brtc	.+4      	; 0x2e80 <itoa+0x3a>
    2e7c:	5d e2       	ldi	r21, 0x2D	; 45
    2e7e:	51 93       	st	Z+, r21
    2e80:	10 82       	st	Z, r1
    2e82:	c9 01       	movw	r24, r18
    2e84:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <strrev>

00002e88 <strrev>:
    2e88:	dc 01       	movw	r26, r24
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	67 2f       	mov	r22, r23
    2e8e:	71 91       	ld	r23, Z+
    2e90:	77 23       	and	r23, r23
    2e92:	e1 f7       	brne	.-8      	; 0x2e8c <strrev+0x4>
    2e94:	32 97       	sbiw	r30, 0x02	; 2
    2e96:	04 c0       	rjmp	.+8      	; 0x2ea0 <strrev+0x18>
    2e98:	7c 91       	ld	r23, X
    2e9a:	6d 93       	st	X+, r22
    2e9c:	70 83       	st	Z, r23
    2e9e:	62 91       	ld	r22, -Z
    2ea0:	ae 17       	cp	r26, r30
    2ea2:	bf 07       	cpc	r27, r31
    2ea4:	c8 f3       	brcs	.-14     	; 0x2e98 <strrev+0x10>
    2ea6:	08 95       	ret

00002ea8 <__udivmodhi4>:
    2ea8:	aa 1b       	sub	r26, r26
    2eaa:	bb 1b       	sub	r27, r27
    2eac:	51 e1       	ldi	r21, 0x11	; 17
    2eae:	07 c0       	rjmp	.+14     	; 0x2ebe <__udivmodhi4_ep>

00002eb0 <__udivmodhi4_loop>:
    2eb0:	aa 1f       	adc	r26, r26
    2eb2:	bb 1f       	adc	r27, r27
    2eb4:	a6 17       	cp	r26, r22
    2eb6:	b7 07       	cpc	r27, r23
    2eb8:	10 f0       	brcs	.+4      	; 0x2ebe <__udivmodhi4_ep>
    2eba:	a6 1b       	sub	r26, r22
    2ebc:	b7 0b       	sbc	r27, r23

00002ebe <__udivmodhi4_ep>:
    2ebe:	88 1f       	adc	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	5a 95       	dec	r21
    2ec4:	a9 f7       	brne	.-22     	; 0x2eb0 <__udivmodhi4_loop>
    2ec6:	80 95       	com	r24
    2ec8:	90 95       	com	r25
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	08 95       	ret

00002ed0 <_exit>:
    2ed0:	f8 94       	cli

00002ed2 <__stop_program>:
    2ed2:	ff cf       	rjmp	.-2      	; 0x2ed2 <__stop_program>
